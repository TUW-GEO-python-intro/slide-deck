#+OPTIONS: reveal_center:t reveal_control:t reveal_height:-1
#+OPTIONS: reveal_history:nil reveal_keyboard:t reveal_mathjax:nil
#+OPTIONS: reveal_overview:t reveal_progress:t
#+OPTIONS: reveal_rolling_links:nil reveal_slide_number:t
#+OPTIONS: reveal_title_slide:t reveal_width:-1
#+options: toc:nil ^:nil num:nil
#+REVEAL_MARGIN: -1
#+REVEAL_MIN_SCALE: -1
#+REVEAL_MAX_SCALE: -1
#+REVEAL_ROOT: ../reveal.js
#+REVEAL_TRANS: default
#+REVEAL_SPEED: default
#+REVEAL_THEME: black
#+REVEAL_EXTRA_CSS: ../code_formatting.css
#+REVEAL_EXTRA_JS: 
#+REVEAL_HLEVEL: 1
#+REVEAL_TITLE_SLIDE_TEMPLATE: <h1>%t</h1> <h2>%a</h2> <h2>%e</h2> <h2>%d</h2>
#+REVEAL_TITLE_SLIDE_BACKGROUND:
#+REVEAL_TITLE_SLIDE_BACKGROUND_SIZE:
#+REVEAL_TITLE_SLIDE_BACKGROUND_REPEAT:
#+REVEAL_TITLE_SLIDE_BACKGROUND_TRANSITION:
#+REVEAL_MATHJAX_URL: http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+REVEAL_SLIDE_NUMBER: t
#+REVEAL_PREAMBLE:
#+REVEAL_HEAD_PREAMBLE:
#+REVEAL_POSTAMBLE:
#+REVEAL_MULTIPLEX_ID:
#+REVEAL_MULTIPLEX_SECRET:
#+REVEAL_MULTIPLEX_URL:
#+REVEAL_MULTIPLEX_SOCKETIO_URL:
#+REVEAL_PLUGINS:

#+AUTHOR:
#+EMAIL: 
#+TITLE: Numpy and Scipy Packages

* Numpy
- The [[http://www.numpy.org][numpy package]] is used in almost all numerical computations using Python
- Provides high-performance vector, matrix and higher-dimensional data
  structures
- Fast array, vector and matrix calculations, implemented in C and Fortran

To use numpy you need to import the module
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
import numpy as np 
print("Numpy version {:}".format(np.__version__))
#+end_src

#+results:
: 
: Numpy version 1.10.1
* Getting started
- [[http://www.scipy.org/scipylib/download.html][Getting Numpy]]
- [[http://docs.scipy.org/doc/][Numpy and scipy documentation page]]
- [[http://www.scipy.org/Tentative_NumPy_Tutorial][Numpy tutorial]]
- [[http://www.scipy.org/NumPy_for_Matlab_Users][Numpy for MATLAB Users]]
- [[http://www.scipy.org/Numpy_Functions_by_Category][Numpy functions by category]]
* Creating Numpy arrays
There are a number of ways to initialize new numpy arrays, for example from
- a Python list or tuples
- using functions that are dedicated to generating Numpy arrays, such as
  [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.arange.html][np.arange]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.linspace.html][np.linspace]], etc.
- reading data from files
** From lists
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
# a vector: the argument to the function is a Python list
v = np.array([1, 2, 3, 4])
print(v)
#+end_src

#+RESULTS:
: 
: >>> [1 2 3 4]

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
# a matrix: the argument to the function is a nested Python list
M = np.array([[1, 2], [3, 4]])
print(M)
#+end_src

#+RESULTS:
: 
: >>> [[1 2]
:  [3 4]]

*** Difference between v and M

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
print(type(v), type(M))
#+end_src

#+RESULTS:
: <class 'numpy.ndarray'> <class 'numpy.ndarray'>
The difference between the v and M arrays is only their shapes. The information
about the shape of an array by using the =ndarray.shape= property.

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
print(v.shape, M.shape)
#+end_src

#+RESULTS:
: (4,) (2, 2)
*** Numpy array vs. lists
So far the =numpy.ndarray= looks similar to a Python list (or nested
list). Why do we need numpy arrays?

- Python lists are very general. Each element can be any kind of object.
- General is also slow.
- Numpy arrays have one fixed type set during initialization.
- They are memory efficient and element access is fast.

***  Additional Background                                         :noexport:
- Because of the static typing, fast implementation of mathematical functions
  such as multiplication and addition of numpy arrays can be implemented in a
  compiled language (C and Fortran is used).
*** Type of an array
Using the =ndarray.dtype= (data type) property, we can see the type of an array:

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
print(v.dtype, M.dtype)
#+end_src

#+RESULTS:
: int64 int64

We get an error if we try to assign a value of an uncastable type to an element
in a Numpy array:

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
M[0, 0] = "hello"
#+end_src

#+RESULTS:
: Traceback (most recent call last):
:   File "<stdin>", line 1, in <module>
: ValueError: invalid literal for int() with base 10: 'hello'
*** dtypes are enforced
The type defined at the initialization won't be changed automatically.
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
M[0, 0] = 1.2345
print(M[0, 0], M.dtype)
#+end_src

#+RESULTS:
: 
: 1 int64

However, the data type can be changed later if it is desired (e.g. using =numpy.ndarray.astype=). 
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
x = M.astype(np.float32)
print(x, x.dtype)
#+end_src

#+RESULTS:
: 
: [[ 1.  2.]
:  [ 3.  4.]] float32
*** dtypes can be changed
If we want, we can explicitly define the data type of the array during creation,
using the =dtype= keyword argument.
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
M = np.array([[1, 2], [3, 4]], dtype=np.complex)
print(M)
#+end_src

#+RESULTS:
: 
: [[ 1.+0.j  2.+0.j]
:  [ 3.+0.j  4.+0.j]]

Common =dtypes= are:

| =np.int8=   | =np.int16=  | =np.int32=   | =np.int64=   |
| =np.uint32= | =np.uint64= | =np.float32= | =np.float64= |
| =np.bool=   | =np.object= | =np.uint16=  | =np.complex= |

** Using array-generating functions
For larger arrays it is unpractical to initialize the data manually, using
explicit python lists. Instead we can use one of the many functions in Numpy
that generate arrays of different forms. Some of the more common ones are:

Ones and Zeros

[[http://docs.scipy.org/doc/numpy/reference/generated/numpy.empty.html][np.empty]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.zeros.html][np.zeros]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.ones.html][np.ones]]

Numerical ranges

[[http://docs.scipy.org/doc/numpy/reference/generated/numpy.arange.html][np.arange]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.linspace.html][np.linspace]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.logspace.html][np.logspace]]
** 
Random numbers

[[http://docs.scipy.org/doc/numpy/reference/generated/numpy.random.rand.html][np.random.rand]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.random.randn.html][np.random.randn]]

Building matrices

[[http://docs.scipy.org/doc/numpy/reference/generated/numpy.identity.html][np.identity]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.diag.html][np.diag]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.tri.html][np.tri]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.tril.html][np.tril]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.triu.htmln][p.triu]]

From existing data

[[http://docs.scipy.org/doc/numpy/reference/generated/numpy.fromfile.html][np.fromfile]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.fromstring.html][np.fromstring]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.loadtxt.html][np.loadtxt]]
** Ones and Zeros
[[http://docs.scipy.org/doc/numpy/reference/generated/numpy.zeros.html][np.zeros]]
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
x = np.zeros(3, dtype=np.int)
print(x)
#+end_src

#+RESULTS:
: 
: [0 0 0]

[[http://docs.scipy.org/doc/numpy/reference/generated/numpy.ones.html][np.ones]]
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
x = np.ones((3, 3), dtype=np.float)
print(x)
#+end_src

#+RESULTS:
: 
: [[ 1.  1.  1.]
:  [ 1.  1.  1.]
:  [ 1.  1.  1.]]
** Numerical ranges
[[http://docs.scipy.org/doc/numpy/reference/generated/numpy.arange.html][np.arange]]
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
# creates a range, arguments: [start=0], stop, [step=1]
x = np.arange(10) 
print(x)
#+end_src

#+RESULTS:
: 
: >>> [0 1 2 3 4 5 6 7 8 9]

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
x = np.arange(2, -1, -0.5)
print(x)
#+end_src

#+RESULTS:
: 
: [ 2.   1.5  1.   0.5  0.  -0.5]
** 
[[http://docs.scipy.org/doc/numpy/reference/generated/numpy.linspace.html][np.linspace]]
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
# using linspace, both end points ARE included. [start, stop, n_steps]
x = np.linspace(0, 10, 11)
print(x)
#+end_src

#+RESULTS:
: 
: >>> [  0.   1.   2.   3.   4.   5.   6.   7.   8.   9.  10.]

[[http://docs.scipy.org/doc/numpy/reference/generated/numpy.logspace.html][np.logspace]]
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
x = np.logspace(0, 10, 11, base=10)
print(x)
#+end_src

#+RESULTS:
: 
: [  1.00000000e+00   1.00000000e+01   1.00000000e+02   1.00000000e+03
:    1.00000000e+04   1.00000000e+05   1.00000000e+06   1.00000000e+07
:    1.00000000e+08   1.00000000e+09   1.00000000e+10]
** Random numbers
[[http://docs.scipy.org/doc/numpy/reference/generated/numpy.random.rand.html][np.random.rand]]
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
# each element is from the uniform random distribution [0,1]
x = np.random.rand(5, 5) 
print(x)
#+end_src

#+RESULTS:
: 
: >>> [[ 0.31066644  0.27575344  0.19720908  0.07443492  0.32938099]
:  [ 0.61825939  0.27423665  0.06852286  0.34406263  0.12470873]
:  [ 0.47382274  0.87902069  0.58383363  0.50476503  0.1419766 ]
:  [ 0.7353448   0.36619104  0.18798354  0.23796696  0.96839186]
:  [ 0.69127256  0.62541535  0.11655357  0.05070096  0.49968362]]

The standard normal distribution is available as [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.randn.html][np.random.randn]]
** Building matrices
[[http://docs.scipy.org/doc/numpy/reference/generated/numpy.diag.html][np.diag]]
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
x = np.diag([1, 2, 3]) # the diagonal of an otherwise zero matrix
print(x)
#+end_src

#+RESULTS:
: 
: [[1 0 0]
:  [0 2 0]
:  [0 0 3]]

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
y = np.diag(x)
print(y)
#+end_src

#+RESULTS:
: 
: [1 2 3]
** 
[[http://docs.scipy.org/doc/numpy/reference/generated/numpy.tri.html][np.tri]]
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
# ones at and below the given diagonal and zeros elsewhere
x = np.tri(3) 
print(x)
#+end_src

#+RESULTS:
: 
: >>> [[ 1.  0.  0.]
:  [ 1.  1.  0.]
:  [ 1.  1.  1.]]

[[http://docs.scipy.org/doc/numpy/reference/generated/numpy.triu.html][np.triu]]
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
# Upper triangle of an array.
x = np.triu(np.ones((3, 3))*2)
print(x)
#+end_src

#+RESULTS:
: 
: >>> [[ 2.  2.  2.]
:  [ 0.  2.  2.]
:  [ 0.  0.  2.]]
** More properties of the numpy arrays
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
M = np.ones((3, 3), dtype=np.uint8) * 21
print(M.dtype)
M.itemsize # bytes per element
#+end_src

#+RESULTS:
: 
: uint8
: 1

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
M.nbytes # number of bytes
#+end_src

#+RESULTS:
: 9

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
M.ndim # number of dimensions
#+end_src

#+RESULTS:
: 2
* Manipulating arrays
- Basic indexing and slicing
- Advanced indexing
  - Index arrays
  - Boolean index arrays
** Basic indexing
Array indexing refers to any use of =[]= to index array values.
- Many options for indexing means great power but also the potential for confusion.

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
# v is a vector, and has only one dimension, taking one index
v = np.arange(10)
print(v)
print(v[0], v[-2])
#+end_src

#+RESULTS:
: 
: >>> [0 1 2 3 4 5 6 7 8 9]
: 0 8
** Multidimensional indexing
Unlike lists and tuples, Numpy arrays support multidimensional indexing. That
means that it is not necessary to first select a subarray and index it again.
- For 2D arrays =[row, column]= instead of =[row][column]=.

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
v.shape = (2, 5)
print(v)
# v is now a 2 dimensional array, taking two indices 
print(v[1, 4], v[1, 4]==v[1][4])
#+end_src

#+RESULTS:
: 
: [[0 1 2 3 4]
:  [5 6 7 8 9]]
: ... 9 True
** Indexing
- Note :: indexing a multidimensional array with fewer indices than dimensions,
     returns a subdimensional array.

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
print(v[0])
#+end_src

#+RESULTS:
: [0 1 2 3 4]

The same thing can be achieved with using =:= 

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
print(v[0, :])
print(v[:, 3])
#+end_src

#+RESULTS:
: [0 1 2 3 4]
: [3 8]
** Common misunderstandings
- Numpy does not copy values in memory unless explicitly told to to so.

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
b = v[0]
a = v[0].copy()
print('b:', b)
b[3] = 999
print('v:', v)
print('a:', a)
#+end_src

#+RESULTS:
:
: >>> b: [  0   1   2 999   4]
: >>> v: [[  0   1   2 999   4]
:  [  5   6   7   8   9]]
: a: [  0   1   2 999   4]


** Slicing
Slicing syntax like lists and strings =[start:stop:step]= but for multiple dimensions.

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
x = np.dstack([np.zeros(4),np.arange(1,5),
               np.zeros(4), np.arange(6,10)]).reshape(4,4)
print(x)
print(x[:, ::2]) # get the zeros
#+end_src

#+RESULTS:
: 
: >>> [[ 0.  1.  0.  6.]
:  [ 0.  2.  0.  7.]
:  [ 0.  3.  0.  8.]
:  [ 0.  4.  0.  9.]]
: [[ 0.  0.]
:  [ 0.  0.]
:  [ 0.  0.]
:  [ 0.  0.]]

** Slicing

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
print(x)
print(x[:-2])
print(x[1:4:2, 1:4:2])
#+end_src

#+RESULTS:
: [[ 0.  1.  0.  6.]
:  [ 0.  2.  0.  7.]
:  [ 0.  3.  0.  8.]
:  [ 0.  4.  0.  9.]]
: [[ 0.  1.  0.  6.]
:  [ 0.  2.  0.  7.]]
: [[ 2.  7.]
:  [ 4.  9.]]

** Views
Slices of arrays do not copy the internal array data but produce new
*views* of the original data.

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
x = np.arange(5)
y = x[::2]
print(x)
print(y)
y[0] = 3
print(x)
print(y)
#+end_src

#+RESULTS:
: 
: >>> [0 1 2 3 4]
: [0 2 4]
: >>> [3 1 2 3 4]
: [3 2 4]

Making changes to the view changes the underlying array!
** Views                                                          :noexport:
[[http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.view.html][np.ndarray.view]]

New view of array with the same data and is used two different ways:
1. =a.view(some_dtype)= or =a.view(dtype=some_dtype)= constructs a view of the
   array's memory with a different data-type. This can cause a reinterpretation
   of the bytes of memory.
2. =a.view(ndarray_subclass)= or =a.view(type=ndarray_subclass)= just returns an
   instance of ndarray_subclass that looks at the same array (same shape, dtype,
   etc.) This does not cause a reinterpretation of the memory.
** Advanced indexing
Arrays can be indexed with other arrays to select elements into new arrays.
1. Using index arrays.
2. Using boolean indexing.
Index arrays are a very powerful tool.
** Index arrays
Indexing an array returns a *copy* of the original data, not a view.
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
x = np.arange(10, 1, -1)
y = x[np.arange(0, 8, 2)]
print(x)
print(y)
y[0] = 55
print(x)
print(y)
#+end_src

#+RESULTS:
: 
: >>> [10  9  8  7  6  5  4  3  2]
: [10  8  6  4]
: >>> [10  9  8  7  6  5  4  3  2]
: [55  8  6  4]

** Boolean index arrays
Boolean index arrays are used to decide for each element if it should be in the
output array. So they must have the same shape as array being indexed.
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
y = np.arange(10)
b = y > 5
print(b)
print(y[b], y[y < 5], y[(y>6) & (y!=9)])
#+end_src

#+RESULTS:
: 
: >>> [False False False False False False  True  True  True  True]
: [6 7 8 9] [0 1 2 3 4] [7 8]

** Combining index arrays with slices
Index arrays may be combined with slices. For example:
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
y = np.arange(64).reshape(8, 8)
print(y)
print(y[np.array([0,2,4]),1:3])
#+end_src

#+RESULTS:
#+begin_example

[[ 0  1  2  3  4  5  6  7]
 [ 8  9 10 11 12 13 14 15]
 [16 17 18 19 20 21 22 23]
 [24 25 26 27 28 29 30 31]
 [32 33 34 35 36 37 38 39]
 [40 41 42 43 44 45 46 47]
 [48 49 50 51 52 53 54 55]
 [56 57 58 59 60 61 62 63]]
[[ 1  2]
 [17 18]
 [33 34]]
#+end_example
** Combining boolean indexing and slices
Likewise, slicing can be combined with broadcasted boolean indices:
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
b = y < 13
print(y)
print(y[1:3, b[1, :]])
#+end_src

#+RESULTS:
#+begin_example

[[ 0  1  2  3  4  5  6  7]
 [ 8  9 10 11 12 13 14 15]
 [16 17 18 19 20 21 22 23]
 [24 25 26 27 28 29 30 31]
 [32 33 34 35 36 37 38 39]
 [40 41 42 43 44 45 46 47]
 [48 49 50 51 52 53 54 55]
 [56 57 58 59 60 61 62 63]]
[[ 8  9 10 11 12]
 [16 17 18 19 20]]
#+end_example

** Dimension management
Array shapes in expressions or assignments must be compatible. The =np.newaxis=
object adds dimension, =np.squeeze= removes dimensions of size 1
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
y = np.ones((2, 2))
print(y, y.shape)
print(y[:,:, np.newaxis], y[:,:, np.newaxis].shape)
print(np.squeeze(y), np.squeeze(y).shape)
#+end_src

#+RESULTS:
#+begin_example

[[ 1.  1.]
 [ 1.  1.]] (2, 2)
[[[ 1.]
  [ 1.]]

 [[ 1.]
  [ 1.]]] (2, 2, 1)
[[ 1.  1.]
 [ 1.  1.]] (2, 2)
#+end_example

* Broadcasting                                                     :noexport:
The term broadcasting describes how Numpy treats arrays with different shapes
during arithmetic operations. 

Broadcasting provides a means of vectorizing array operations so that looping
occurs in C instead of Python. It does this without making needless copies of
data and usually leads to efficient algorithm implementations. There are,
however, cases where broadcasting is a bad idea because it leads to inefficient
use of memory that slows computation.
** Broadcasting
Numpy operations are usually done on pairs of arrays on an element-by-element
basis. In the simplest case, the two arrays must have exactly the same shape, as
in the following example:

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
a = np.array([1.0, 2.0, 3.0])
b = np.array([2.0, 2.0, 2.0])
print(a * b)
print(a * 2.0)
#+end_src

#+RESULTS:
: 
: >>> [ 2.  4.  6.]
: [ 2.  4.  6.]

** General Broadcasting Rules

- When operating on two arrays, numpy compares their shapes element-wise. It
  starts with the trailing dimensions, and works its way forward. Two dimensions
  are compatible when
  - they are equal, 
  - or one of them is 1 
- If these conditions are not met, a =ValueError: frames are not aligned
  exception= is thrown, indicating that the arrays have incompatible shapes. The
  size of the resulting array is the maximum size along each dimension of the
  input arrays
** Broadcasting example
In the following example, both the A and B arrays have axes with length one that
are expanded to a larger size during the broadcast operation:

A      (4d array):  8 x 1 x 6 x 1
B      (3d array):      7 x 1 x 5
Result (4d array):  8 x 7 x 6 x 5

[[http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html][More examples]]
* Linear algebra
Vectorizing code is the key to writing efficient numerical calculation with
Python/Numpy. That means that as much as possible of a program should be
formulated in terms of matrix and vector operations, like matrix-matrix
multiplication.
** Scalar-array operations
We can use the usual arithmetic operators to multiply, add, subtract, and divide
arrays with scalar numbers.
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
v = np.arange(5)
print(v * 2, v + 3, v / 2., v - 5)
#+end_src

#+RESULTS:
: 
: [0 2 4 6 8] [3 4 5 6 7] [ 0.   0.5  1.   1.5  2. ] [-5 -4 -3 -2 -1]

** Element-wise array-array operations
When we add, subtract, multiply and divide arrays with each other, the default
behaviour is element-wise operations:
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
m = np.arange(9).reshape(3, 3)
v = np.arange(3)
print(m * m)
print(m ** 2)
print(m * v)
#+end_src

#+RESULTS:
#+begin_example

>>> [[ 0  1  4]
 [ 9 16 25]
 [36 49 64]]
[[  0   1   8]
 [ 27  64 125]
 [216 343 512]]
[[ 0  1  4]
 [ 0  4 10]
 [ 0  7 16]]
#+end_example

** Matrix algebra
We can either use the [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.dot.html][np.dot]] function, which applies a matrix-matrix,
matrix-vector, or inner vector multiplication to its two arguments:
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
print(np.dot(m, v))
#+end_src

#+RESULTS:
: [ 5 14 23]

For 2-D arrays it is equivalent to matrix multiplication, and for 1-D arrays to
inner product of vectors.
** Matrix algebra
Alternatively, we can cast the array objects to the type [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.matrix.html][np.matrix]]. This changes
the behavior of the standard arithmetic operators +, -, * to use matrix algebra.
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
M = np.matrix(m)
vec = np.matrix(v).T # make it a column vector
print(M * vec)
#+end_src

#+RESULTS:
: 
: >>> [[ 5]
:  [14]
:  [23]]

** Matrix algebra
More examples
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
# inner product
print(np.dot(v, v))
print(vec.T * vec)
#+end_src

#+RESULTS:
: 
: 5
: [[5]]

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
# with matrix objects, standard matrix algebra applies
print(vec + M * vec)
#+end_src

#+RESULTS:
: 
: [[ 5]
:  [15]
:  [25]]

** Matrix computations

Inverse: [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.inv.html][np.linalg.inv]]
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
M = np.matrix([[4, 2, 9], [11, 2, 3], [9, 3, 1]])
print(np.linalg.inv(M))
#+end_src

#+RESULTS:
: 
: [[-0.05035971  0.17985612 -0.08633094]
:  [ 0.11510791 -0.55395683  0.62589928]
:  [ 0.10791367  0.04316547 -0.10071942]]

Determinant:[[http://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.det.html][ np.linalg.det]]
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
print(np.linalg.det(M))
#+end_src

#+RESULTS:
: 139.0

* Mathematical functions
Exponents and logarithms, trigonometric functions
- [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.exp.html][np.exp]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.log.html][np.log]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.cos.html][np.cos]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.sin.html][np.sin]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.tan.html][np.tan]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.arcsin.html][np.arcsin]], ...

Linear algebra
- [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.svd.html][linalg.svd]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.eig.html][linalg.eig]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.qr.html][linalg.qr]], ...

Handling complex numbers
- [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.real.html][np.real]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.imag.html][np.imag]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.conj.html][np.conj]], ...

Floating functions, and miscellaneous
- [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.floor.html][np.floor]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.ceil.html][np.ceil]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.isnan.html][np.isnan]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.sqrt.html][np.sqrt]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.convolve.html][np.convolve]], ...
* Data processing
Often it is useful to store datasets in Numpy arrays. Numpy provides a number of
functions to calculate statistics of datasets in arrays.
- [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.mean.html][np.mean]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.std.html][np.std]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.var.html][np.var]]
- [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.amin.html][np.amin]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.amax.html][np.amax]]
- [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html][np.sum]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.prod.html][np.prod]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.cumsum.html][np.cumsum]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.cumprod.html][np.cumprod]]
** Some examples
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
x = np.arange(10)
print(np.sum(x))
#+end_src

#+RESULTS:
: 
: 45

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
print(np.mean(x))
#+end_src

#+RESULTS:
: 4.5

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
print(np.var(x))
#+end_src

#+RESULTS:
: 8.25

* Reshaping, resizing and stacking arrays
The shape of an Numpy array can be modified without copying the underlaying
data, which makes it a fast operation even for large arrays.
** Reshaping
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
x = np.arange(24)
print(x)
#+end_src

#+RESULTS:
: 
: [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
v = np.reshape(x, (4, 6))
print(v)
#+end_src

#+RESULTS:
: 
: [[ 0  1  2  3  4  5]
:  [ 6  7  8  9 10 11]
:  [12 13 14 15 16 17]
:  [18 19 20 21 22 23]]

** Resizing
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
v = np.array([[0, 1], [2, 3]])
x = np.resize(v, (1,4))
print(x)
#+end_src

#+RESULTS:
: 
: >>> [[0 1 2 3]]

** Repeating and Stacking
Using function [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.repeat.html][np.repeat]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.tile.html][np.tile]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.vstack.html][np.vstack]], [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.hstack.html][np.hstack]], and [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html][np.concatenate]] we
can create larger vectors and matrices from smaller ones:
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
v = np.array([[1, 2], [3, 4]])
# repeat each element 3 times
print(np.repeat(v, 3))
#+end_src

#+RESULTS:
: 
: ... [1 1 1 2 2 2 3 3 3 4 4 4]

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
# tile the matrix 3 times 
print(np.tile(v, 3))
#+end_src

#+RESULTS:
: 
: [[1 2 1 2 1 2]
:  [3 4 3 4 3 4]]

** Stacking
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
v = np.array([[0, 1], [2, 3]])
w = np.array([[5, 6]])
print(np.concatenate((v, w), axis=0))
#+end_src

#+RESULTS:
: 
: >>> [[0 1]
:  [2 3]
:  [5 6]]

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
print(np.concatenate((v, w.T), axis=1))
#+end_src

#+RESULTS:
: [[0 1 5]
:  [2 3 6]]

** Stacking
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
v = np.array([[0, 1], [2, 3]])
w = np.array([[5, 6]])
x = np.vstack((v, w))
print(x)
#+end_src

#+RESULTS:
: 
: >>> >>> [[0 1]
:  [2 3]
:  [5 6]]

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
x = np.hstack((v, w.T))
print(x)
#+end_src

#+RESULTS:
: 
: [[0 1 5]
:  [2 3 6]]

* Copy and "deep copy"
To achieve high performance, assignments in Python usually do not copy the
underlaying objects. This is important for example when objects are passed
between functions, to avoid an excessive amount of memory copying when it is not
necessary (technical term: pass by reference).
** Without copy
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
A = np.array([[1, 2], [3, 4]])
# now B is referring to the same array data as A 
B = A 
# changing B affects A
B[0, 0] = 10
print(A)
#+end_src

#+RESULTS:
: 
: ... >>> ... >>> [[10  2]
:  [ 3  4]]

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
print(B)
#+end_src

#+RESULTS:
: [[10  2]
:  [ 3  4]]
** Copy
If we want to avoid this behavior, so that when we get a new completely
independent object B copied from A, then we need to do a so-called "deep copy"
using the function copy:
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
A = np.array([[1, 2], [3, 4]])
B = A.copy()
# now, if we modify B, A is not affected
B[0, 0] = -5
print(A)
#+end_src

#+RESULTS:
: 
: >>> ... >>> [[1 2]
:  [3 4]]

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
print(B)
#+end_src

#+RESULTS:
: [[-5  2]
:  [ 3  4]]
* Iterating over array elements
Generally, we want to avoid iterating over the elements of arrays whenever we
can (at all costs). The reason is that in a interpreted language like Python (or
MATLAB), iterations are really slow compared to vectorized operations.

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
v = np.array([1,2,3,4])
for element in v:
    print(element)
#+end_src

#+RESULTS:
: 
: ... ... 1
: 2
: 3
: 4

* Some Numpy functions
** =np.where=
The position index can be found using the [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.where.html][np.where]] function
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
x = np.arange(10) + 20
indices = np.where((x >= 22) & (x < 27))
print(indices)
#+end_src

#+RESULTS:
: 
: >>> (array([2, 3, 4, 5, 6]),)

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
print(x[indices])
#+end_src

#+RESULTS:
: [22 23 24 25 26]

** =np.where= cont.
[[http://docs.scipy.org/doc/numpy/reference/generated/numpy.where.html][np.where]] can also be used to choose from  one of two arrays
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
x = np.arange(10) + 20
y = np.arange(10)
z = np.where((x >= 22) & (x < 27), x, y)
print(z)
#+end_src

#+RESULTS:
: 
: >>> >>> [ 0  1 22 23 24 25 26  7  8  9]

** =np.choose=
Constructs an array by picking elements form several arrays using
[[http://docs.scipy.org/doc/numpy/reference/generated/numpy.choose.html][np.choose]]
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
which = [1, 0, 1, 0]
choices = [[-2, -2, -2, -2], [5, 5, 5, 5]]
x = np.choose(which, choices)
print(x)
#+end_src

#+RESULTS:
: 
: >>> >>> [ 5 -2  5 -2]

** =np.take=
Take elements from an array along an axis (for completeness, the function
[[http://docs.scipy.org/doc/numpy/reference/generated/numpy.take.html][np.take]] does the same thing as "fancy" indexing (i.e. indexing arrays using
arrays); however it can be easier to use if you need elements along a given axis.

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
v = np.array([4, 3, 5, 7, 6, 8])
indices = np.array([0, 1, 4])
x = np.take(v, indices)
print(x)
print(v[indices])
#+end_src

#+RESULTS:
: 
: >>> >>> [4 3 6]
: [4 3 6]

** =np.select=
Return an array drawn from elements in choicelist, depending on conditions using
[[http://docs.scipy.org/doc/numpy/reference/generated/numpy.select.html][np.select]].

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
x = np.arange(10)
condlist = [x<3, x>5]
choicelist = [x, x**2]
v = np.select(condlist, choicelist, default=9999)
print(v)
#+end_src

#+RESULTS:
: 
: >>> >>> >>> [   0    1    2 9999 9999 9999   36   49   64   81]

** =np.place=
Change elements of an array based on conditional and input values using [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.place.html][np.place]].

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
m = np.arange(6).reshape(2, 3)
print(m)
np.place(m, m>2, [4, 55])
print(m)
#+end_src

#+RESULTS:
: 
: [[0 1 2]
:  [3 4 5]]
: >>> [[ 0  1  2]
:  [ 4 55  4]]

** And many more ...
The [[http://docs.scipy.org/doc/numpy/reference/index.html][Numpy reference manual]] gives details on functions, modules, and objects
included in Numpy, describing what they are and what they do.
* Further Numpy topics
- [[http://docs.scipy.org/doc/numpy/reference/maskedarray.html][Masked arrays]]
- [[http://docs.scipy.org/doc/numpy/user/basics.io.html][Numpy IO]] (will be covered in another session)
- [[http://docs.scipy.org/doc/numpy/reference/arrays.datetime.html][Datetime and timedeltas]]
- [[http://docs.scipy.org/doc/numpy/reference/routines.polynomials.html][Numpy polynomials functions]]
- [[http://docs.scipy.org/doc/numpy/reference/routines.sort.html][Sorting, searching, counting]]
- [[http://docs.scipy.org/doc/numpy/reference/routines.logic.html][Logic functions]]
- [[http://docs.scipy.org/doc/numpy/reference/routines.statistics.html][More on statistics]]
- [[http://docs.scipy.org/doc/numpy/user/basics.rec.html][Structured arrays]] (aka "Record arrays")
- [[http://docs.scipy.org/doc/numpy/user/basics.byteswapping.html][Byte-swapping]]
- [[http://docs.scipy.org/doc/numpy/user/basics.subclassing.html][Subclassing ndarray]]
- and many [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.var.html][more]] ...
* Scipy 
[[http://docs.scipy.org/doc/][Scipy]] (Scientific Computing Tools for Python) is a Python-based ecosystem of
open-source software for mathematics, science, and engineering. In particular,
these are some of the core packages:
- Python (2.x >= 2.6 or 3.x >= 3.2)
- NumPy (>= 1.6)
- Scipy library (>= 0.10)
- Matplotlib (>= 1.1)
- dateutil
- pytz
** Scipy library
The [[http://docs.scipy.org/doc/][Scipy library]] is one of the core packages that make up the Scipy stack. It
provides many [[http://docs.scipy.org/doc/scipy/reference/][user-friendly and efficient numerical routines]] such as routines
for numerical integration and optimization.
** Example I - Interpolation (scipy.interpolate)
There are several general [[http://docs.scipy.org/doc/scipy/reference/tutorial/interpolate.html][interpolation facilities]] available in Scipy, for data
in 1, 2, and higher dimension

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
from scipy.interpolate import interp1d
x = np.linspace(0, 10, 10)
y = np.cos(-x**2 / 8.0)
f = interp1d(x, y, kind='cubic')
print(y[:4])
#+end_src

#+RESULTS:
: 
: >>> >>> >>> [ 1.          0.98811613  0.81545357  0.18090587]

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
print(f(x)[:4])
#+end_src

#+RESULTS:
: [ 1.          0.98811613  0.81545357  0.18090587]
** Example II - Statistics (scipy.stats)
This [[http://docs.scipy.org/doc/scipy/reference/stats.html][module]] contains a large number of probability distributions as well as a
growing library of statistical functions.  There are several general

#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
from scipy.stats import norm

# The probability density function for norm is:
# norm.pdf(x) = exp(-x**2/2)/sqrt(2*pi)

# Calculate a few first moments 
mean, var, skew, kurt = norm.stats(moments='mvsk')
print(mean, var, skew, kurt)
#+end_src

#+RESULTS:
: 
: >>> ... ... >>> ... >>> 0.0 1.0 0.0 0.0

** Example II - Statistics (scipy.stats)
#+begin_src python :results output :exports code :tangle lecture5.py :session *python*
import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(norm.ppf(0.01), norm.ppf(0.99), 100)

plt.plot(x, norm.pdf(x), 'r-', lw=2)
plt.savefig('./graphics/norm_pdf.png')
#+end_src

#+RESULTS:
: 
: >>> >>> >>> >>> [<matplotlib.lines.Line2D object at 0x7f801c03fc88>]

#+ATTR_HTML: :width 50%
#+LABEL: fig:Norm-pdf
[[./graphics/norm_pdf.png]]
* Numpy exercise
1. Show that A * A^-1 = I
2. Find indices of non-zero elements from [1, 2, 0, 0, 4, 0].
3. Declare a 3x3 identity matrix.
4. Create 1000 random values from a normal distribution.
5. Calculate mean, std, var from a vector of your choice.
** Solutions                                                      :noexport:
*** 1.
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
A = np.array([[1, 8, 3], [42, 2, 1], [22, 21, 22]])
print(np.dot(A, np.linalg.inv(A)))
#+end_src

#+RESULTS:
: 
: [[  1.00000000e+00   1.38777878e-17  -8.32667268e-17]
:  [  2.77555756e-17   1.00000000e+00   0.00000000e+00]
:  [ -4.44089210e-16   1.11022302e-16   1.00000000e+00]]
*** 2.
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
v = np.array([1, 2, 0, 0, 4, 0])
print(np.nonzero(v))
#+end_src

#+RESULTS:
: 
: (array([0, 1, 4]),)
*** 3.
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
print(np.eye(3))
#+end_src

#+RESULTS:
: [[ 1.  0.  0.]
:  [ 0.  1.  0.]
:  [ 0.  0.  1.]]
*** 4.
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
x = np.random.randn(1000)
print(x[:10], x.size)
#+end_src

#+RESULTS:
: 
: [-0.76994695  0.97506539  0.10568746  0.0946075   0.29308117  0.00400586
:   0.9571636   1.48985835  1.08526921  1.29135193] 1000
*** 5.
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
x = np.random.randn(1000)
print(x.mean(), x.std(), x.var())
#+end_src

#+RESULTS:
: 
: -0.0222731013401 1.01725623783 1.03481025341
* Scipy exercise
1. Define a function of your choice (e.g. x^2 + 10 * sin(x)) and find the roots
   (HINT: [[http://docs.scipy.org/doc/scipy-0.15.1/reference/generated/scipy.optimize.root.html][optimize.root]])
2. Calculate the Fourier Transform of the signal = sin(50 * 2 * pi * x) +
   sin(80 * 2 * pi * x), with x defined between 0 and N=1200, and a temporal
   sampling of T=1.0/1200.0
** Solutions                                                      :noexport:
*** 1. Finding roots
#+begin_src python :results output :exports both :tangle lecture5.py :session *python*
from scipy import optimize

def func(x):
    return x**2 + 10 * np.sin(x)

sol = optimize.root(func, -3)
print(sol.x)

sol = optimize.root(func, 1)
print(sol.x)
#+end_src

#+RESULTS:
: 
: >>> ... ... >>> >>> [-2.47948183]
: >>> >>> [ 0.]
*** 2. FFT exercise
#+begin_src python :results output :exports code :tangle lecture5.py :session *python3*
import numpy as np
from scipy.fftpack import fft
import matplotlib.pyplot as plt

# Number of samplepoints
N = 600

# sample spacing
T = 1.0 / 800.0
x = np.linspace(0.0, N*T, N)
y = np.sin(50.0 * 2.0*np.pi*x) + 0.5*np.sin(80.0 * 2.0*np.pi*x)

yf = fft(y)
xf = np.linspace(0.0, 1.0/(2.0*T), N/2)

plt.plot(xf, 2.0/N * np.abs(yf[0:N/2]))
plt.grid()
plt.savefig('./graphics/fft_example.png')
#+end_src

#+RESULTS:
: 
: >>> >>> >>> ... >>> >>> ... >>> >>> >>> >>> >>> >>> >>> [<matplotlib.lines.Line2D object at 0x7fa914090dd8>]
*** 2. FFT exercise
#+ATTR_HTML: :width 50%
#+LABEL: fig:fft-example
[[./graphics/fft_example.png]]
