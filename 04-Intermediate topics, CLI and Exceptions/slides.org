#+OPTIONS: reveal_center:t reveal_control:t reveal_height:-1
#+OPTIONS: reveal_history:nil reveal_keyboard:t reveal_mathjax:nil
#+OPTIONS: reveal_overview:t reveal_progress:t
#+OPTIONS: reveal_rolling_links:nil reveal_slide_number:t
#+OPTIONS: reveal_title_slide:t reveal_width:-1
#+EXCLUDE_TAGS: 
#+options: toc:nil ^:nil tags:nil
#+REVEAL_MARGIN: -1
#+REVEAL_MIN_SCALE: -1
#+REVEAL_MAX_SCALE: -1
#+REVEAL_ROOT: ../reveal.js
#+REVEAL_TRANS: default
#+REVEAL_SPEED: default
#+REVEAL_THEME: black
#+REVEAL_EXTRA_CSS: ../code_formatting.css
#+REVEAL_EXTRA_JS: 
#+REVEAL_HLEVEL: 1
#+REVEAL_TITLE_SLIDE_TEMPLATE: <h1>%t</h1> <h2>%a</h2> <h2>%e</h2> <h2>%d</h2>
#+REVEAL_TITLE_SLIDE_BACKGROUND:
#+REVEAL_TITLE_SLIDE_BACKGROUND_SIZE:
#+REVEAL_TITLE_SLIDE_BACKGROUND_REPEAT:
#+REVEAL_TITLE_SLIDE_BACKGROUND_TRANSITION:
#+REVEAL_MATHJAX_URL: http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+REVEAL_PREAMBLE:
#+REVEAL_HEAD_PREAMBLE:
#+REVEAL_POSTAMBLE:
#+REVEAL_MULTIPLEX_ID:
#+REVEAL_MULTIPLEX_SECRET:
#+REVEAL_MULTIPLEX_URL:
#+REVEAL_MULTIPLEX_SOCKETIO_URL:
#+REVEAL_PLUGINS:

#+AUTHOR: Christoph Paulik
#+email: 
#+Title: Intermediate topics, CLI and Exceptions

* Debugging
We will use Pyscripter here but should be very similar in most IDE's.

#+begin_src bash
cd WinPython-32bit-2.7.6.2_incl_OPALS\PyScripter-v2.5.3\PyScripter
open portable Pyscripter by starting "Start PyScripter.bat"
File->Open->lecture2.py
#+end_src

** Debugging Actions
- Breakpoint :: clicking left of line in most IDE's

#+CAPTION: Main Debugging Buttons in PyScripter
#+ATTR_LaTeX: scale=0.75
#+LABEL: fig:debugging-buttons
[[./debugging_buttons.png]]

** Interacting with the Debugger
- Python Interpreter :: write code you want to test
- Hover over variable :: shows its value 
- Variables :: list of all defined variables
- Watches :: Watch variables

** What if we do not have a GUI
#+begin_src python :results output pp :exports both
import pdb # imports the python debugger
pdb.set_trace() # sets a breakpoint
# does also work with ipython
# import ipdb
# ipdb.set_trace()
#+end_src
** 
#+begin_src python :results output pp :exports both :tangle lecture2.py
# Debugging
var1 = "test"
var2 = [1, 2, 3, 4]
var3 = {"key1": 1, "key2": 2}
print(var1, var2, var3) # set a breakpoint here, click on blue dot left of this line
var1 = "modified"
var3["key5"] = "a new value"
#+end_src
* List and Dict comprehension

- for creation of lists or dictionaries based on some loop
- shorter than a classic for loop
 
#+begin_src python :results output pp :exports both :session compr :tangle lecture4.py
  dataset1 = [1.73, 80, 2.4122, -4]
  threshold = 2.
  result = [x > threshold for x in dataset1]
  print(result)
#+end_src

#+RESULTS:
: 
: >>> >>> [False, True, True, False]

** Dictionaries

- we can also construct a dictionary 
#+begin_src python :results output pp :exports both :session compr :tangle lecture4.py
cl = {True: 'larger', False: 'smaller'}
result = {k: cl[k>threshold] for k in dataset1}
print result
#+end_src

#+RESULTS:
: 
: >>> {80: 'larger', 1.73: 'smaller', -4: 'smaller', 2.4122: 'larger'}

** Multiple arguments
#+begin_src python :results output pp :exports both :tangle lecture4.py
data = ['a', 'b', 'c', 'd']
result = {i: x for i,x in enumerate(data)}
print result
#+end_src

#+RESULTS:
: {0: 'a', 1: 'b', 2: 'c', 3: 'd'}

** +Mini+ Tiny Exercise
#+begin_src python :results output pp :exports both :tangle lecture4.py
########################################################
# Tiny Exercise

# Create a list that contains the square value of every
# element in dataset1 using list comprehension.
########################################################
#+end_src

** Solution :noexport:
#+begin_src python :results output pp :exports both :session compr
square = [x**2 for x in dataset1]
print(square)
#+end_src

#+RESULTS:
: 
: [2.9929, 6400, 5.818708839999999, 16]

* Advanced function arguments

Arguments to functions given as lists or tuples can be unpacked by python
#+begin_src python :results output pp :exports both :session args :tangle lecture4.py
  def multi(a, b):
      """Documentation does not fit on slide"""
      return a * b

  print(multi(2,3))
  numbers = [3, 4]
  print(multi(*numbers))
#+end_src

#+RESULTS:
: >>> 6
: >>> 12

** 
The =*= tells python to unpack the arguments
#+begin_src python :results output pp :exports both :session args :tangle lecture4.py
print multi(numbers)
#+end_src

#+RESULTS:
: Traceback (most recent call last):
:   File "<stdin>", line 1, in <module>
: TypeError: multi() takes exactly 2 arguments (1 given)

** Keywords
#+begin_src python :results output pp :exports both :tangle lecture4.py
  def multikw(arg1="dummy", arg2="text"):
      """Documentation does not fit on slide"""
      return " ".join([arg1, arg2])

  kwargs = {'arg1': "this text comes from",
            'arg2': "a keyword dictionary"}

  print(multikw())
  print(multikw(**kwargs))
#+end_src

#+RESULTS:
: dummy text
: this text comes from a keyword dictionary

** * and ** in function definitions
=*= will be a tuple, =**= a dictionary
#+begin_src python :results output pp :exports both :tangle lecture4.py
  def multi(*args):
      """
      Multiplies all given numbers
      """
      print(type(args))
      print("{} Arguments to multiply".format(len(args)))
      res = 1
      for arg in args:
          res *= arg
      return res
  print(multi(2,3,4,5,6))
#+end_src

#+RESULTS:
: <type 'tuple'>
: 5 Arguments to multiply
: 720
** **
#+begin_src python :results output pp :exports both :tangle lecture4.py
  def print_kw(**kwargs):
      """print keywords"""

      print(type(kwargs))
      for key in kwargs:
          print("{}: {}".format(key, kwargs[key]))

  print_kw(argument1=45, argument2="string", test="hello")
#+end_src

#+RESULTS:
: <type 'dict'>
: test: hello
: argument2: string
: argument1: 45

** Functions everywhere
- Every object can be passed into a function
- e.g. another function
#+begin_src python :results output pp :exports both :tangle lecture4.py
def do(f, a, b):
   print f.__doc__ # this is the docstring of the function
   return f(a,b) 
def add(a, b):
   """addition"""
   return a+b
def sub(a, b):
   """subtraction"""
   return a-b

print(do(add, 2, 3))
print(do(sub, 3, 2))
#+end_src

#+RESULTS:
: addition
: 5
: subtraction
: 1


* Command Line Interface (CLI)

** Arguments to your scripts
Stored in =sys.argv=
#+caption: contents of file =cli_1.py=
#+begin_src python :tangle cli_1.py
  if __name__ == '__main__':
      import sys
      print sys.argv
#+end_src
#+begin_src shell :exports both :results output pp
python cli_1.py test -m hello
#+end_src

#+RESULTS:
: ['cli_1.py', 'test', '-m', 'hello']

** Argparse
[[https://docs.python.org/2/howto/argparse.html][official tutorial]]
#+caption: contents of file =cli_2.py=
#+begin_src python :tangle cli_2.py
  import argparse
  if __name__ == '__main__':
      parser = argparse.ArgumentParser(
          description="get the given name, optionally also the surname")
      parser.add_argument("given_name", help="given name of the person")
      parser.add_argument(
          "-s", "--surname", help="the surname of the person")
      args = parser.parse_args()
      print(args.given_name)
      if args.surname:
          print(args.surname)
#+end_src
** Getting user input
#+caption: contents of file =user_input.py=
#+begin_src python :tangle user_input.py
num = raw_input("Give me a number: ")
print(type(num))
num = float(num)
print("This is the number you have given me: {:.2f}".format(num))
#+end_src
What happens if we do not give a number?

* Exceptions 

Are raised when something goes wrong. But can be catched.
#+begin_src python :results output pp :exports both :tangle lecture4.py
  def divide(x, y):
      try:
          result = x / y
      except ZeroDivisionError:
          print "division by zero!"
      else:
          print "result is", result
      finally:
          print "executing finally clause"
  divide(2, 1)
  divide(2, 0)
#+end_src

#+RESULTS:
: result is 2
: executing finally clause
: division by zero!
: executing finally clause

** 
#+begin_src python 
print(divide("2", "1"))
#+end_src

#+begin_example
Traceback (most recent call last):
  File "<stdin>", line 12, in <module>
  File "<stdin>", line 3, in divide
TypeError: unsupported operand type(s) for /: 'str' and 'str'
#+end_example

*** Mini Exercise
#+begin_src python :results output pp :exports both :tangle lecture4.py
########################################################
# Mini Exercise

# write a function that makes sure that the input is
# a number
########################################################
#+end_src

*** solution                                                       :noexport:
We can fix the user input problem
#+begin_src python :tangle user_input_solution.py
  def get_float():
      while True:
          try:
              num = float(raw_input("Give me a number: "))
              break
          except ValueError:
              print "Oops!  That was no valid number.  Try again..."
      return num

  num = get_float()
  print("This is the number you have given me: {:.2f}".format(num))
#+end_src
