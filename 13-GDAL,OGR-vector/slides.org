#+OPTIONS: reveal_center:t reveal_control:t reveal_height:-1
#+OPTIONS: reveal_history:nil reveal_keyboard:t reveal_mathjax:nil
#+OPTIONS: reveal_overview:t reveal_progress:t
#+OPTIONS: reveal_rolling_links:nil reveal_slide_number:t
#+OPTIONS: reveal_title_slide:t reveal_width:-1
#+options: toc:nil ^:nil num:nil
#+REVEAL_MARGIN: -1
#+REVEAL_MIN_SCALE: -1
#+REVEAL_MAX_SCALE: -1
#+REVEAL_ROOT: ../reveal.js
#+REVEAL_TRANS: default
#+REVEAL_SPEED: default
#+REVEAL_THEME: black
#+REVEAL_EXTRA_CSS: ../code_formatting.css
#+REVEAL_EXTRA_JS: 
#+REVEAL_HLEVEL: 1
#+REVEAL_TITLE_SLIDE_TEMPLATE: <h1>%t</h1> <h2>%a</h2> <h2>%e</h2> <h2>%d</h2>
#+REVEAL_TITLE_SLIDE_BACKGROUND:
#+REVEAL_TITLE_SLIDE_BACKGROUND_SIZE:
#+REVEAL_TITLE_SLIDE_BACKGROUND_REPEAT:
#+REVEAL_TITLE_SLIDE_BACKGROUND_TRANSITION:
#+REVEAL_MATHJAX_URL: http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+REVEAL_PREAMBLE:
#+REVEAL_HEAD_PREAMBLE:
#+REVEAL_POSTAMBLE:
#+REVEAL_MULTIPLEX_ID:
#+REVEAL_MULTIPLEX_SECRET:
#+REVEAL_MULTIPLEX_URL:
#+REVEAL_MULTIPLEX_SOCKETIO_URL:
#+REVEAL_PLUGINS:
#+LOCAL_VARIABLES:
#+eval: (setq-local org-babel-default-header-args:python '((:tangle . "lecture7.py")))
#+End:

#+AUTHOR: Christoph Paulik
#+email: 
#+Title: GDAL, OGR - Vector Data

* OGR
- part of GDAL
- OpenGIS simple feature Reference
- Manipulation of vector data
- [[http://www.gdal.org/ogr_formats.html][List of supported vector formats]]
- e.g. Shapefile, PostGIS, KML, CartoDB, ...
** Command line programs
- ogrinfo :: List information about dataset
- ogr2ogr :: Converter for vector data
- orgtindex :: Creates a tileindex
** Geometries Well Known Text (WKT)
WKT can represent 18 distinct geometric objects:
- Geometry
- Point, MultiPoint
- LineString, MultiLineString
- Polygon, MultiPolygon, Triangle
- CircularString
- Curve, MultiCurve, CompoundCurve
- CurvePolygon
- Surface, MultiSurface, PolyhedralSurface
- TIN
- GeometryCollection
*** Examples
- Point :: =POINT(30 10)=
- LineString :: =LINESTRING(30 10, 10 30, 29 34)=
- Polygon :: =POLYGON ((30 10, 40 40, 20 40, 10 20, 30 10))=
** Fiona
#+CAPTION: an ogr's dream girl
#+ATTR_html: :width 25%
[[./Fiona-ogr.jpg]]
*** Library for using OGR bindings in a nice but simple way
- Fiona trades memory and speed for simplicity and readability.
- For special cases or optimized applications - user ogr
- use =ogr2ogr= if you can.
- [[http://toblerity.org/fiona/manual.html][Manual]]
** Shapely
- Computational geometry in the Cartesian plane.
- Projection handled elsewhere
- Data I/O handled elsewhere(OGR, Fiona, DB interface)
- [[http://toblerity.org/shapely/manual.html][Manual]]
** Pyproj
- python bindings to the proj.4 C library
- handles map projections
- [[https://github.com/jswhit/pyproj][Project Site]]
** Descartes
- Allows you to use Shapely Polygons as Matplotlib patches.
- Means that you can plot filled polygons instead of just lines.
- Not really necessary but nice for plotting.
- [[https://pypi.python.org/pypi/descartes][PyPi Site]]
  
** Installation with conda

#+begin_example
conda install -c https://conda.anaconda.org/scitools shapely pyproj fiona
pip install descartes
#+end_example

* Example
- We will work with some open data from the city of Vienna.
- Ipython notebook Wien-Ubahn.ipynb contains the code
** Used data
*** Metro network of Vienna
https://open.wien.gv.at/site/datensatz/?id=2d0e9a21-fa5f-441d-948a-fe97a453a827
*** Districts of Vienna
https://open.wien.at/site/datensatz/?id=2ee6b8bf-6292-413c-bb8b-bd22dbb2ad4b
