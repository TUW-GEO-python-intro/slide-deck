#+OPTIONS: reveal_center:t reveal_control:t reveal_height:-1
#+OPTIONS: reveal_history:nil reveal_keyboard:t reveal_mathjax:nil
#+OPTIONS: reveal_overview:t reveal_progress:t
#+OPTIONS: reveal_rolling_links:nil reveal_slide_number:t
#+OPTIONS: reveal_title_slide:t reveal_width:-1
#+options: toc:nil ^:nil num:nil
#+REVEAL_MARGIN: -1
#+REVEAL_MIN_SCALE: -1
#+REVEAL_MAX_SCALE: -1
#+REVEAL_ROOT: ../reveal.js
#+REVEAL_TRANS: default
#+REVEAL_SPEED: default
#+REVEAL_THEME: black
#+REVEAL_EXTRA_CSS: ../code_formatting.css
#+REVEAL_EXTRA_JS: 
#+REVEAL_HLEVEL: 1
#+REVEAL_TITLE_SLIDE_TEMPLATE: <h1>%t</h1> <h2>%a</h2> <h2>%e</h2> <h2>%d</h2>
#+REVEAL_TITLE_SLIDE_BACKGROUND:
#+REVEAL_TITLE_SLIDE_BACKGROUND_SIZE:
#+REVEAL_TITLE_SLIDE_BACKGROUND_REPEAT:
#+REVEAL_TITLE_SLIDE_BACKGROUND_TRANSITION:
#+REVEAL_MATHJAX_URL: http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+REVEAL_SLIDE_NUMBER: t
#+REVEAL_PREAMBLE:
#+REVEAL_HEAD_PREAMBLE:
#+REVEAL_POSTAMBLE:
#+REVEAL_MULTIPLEX_ID:
#+REVEAL_MULTIPLEX_SECRET:
#+REVEAL_MULTIPLEX_URL:
#+REVEAL_MULTIPLEX_SOCKETIO_URL:
#+REVEAL_PLUGINS:

#+AUTHOR: Sebastian Hahn
#+EMAIL: 
#+TITLE: Object oriented programming

* Introduction
[[http://en.wikipedia.org/wiki/Object-oriented_programming][Object-oriented programming (OOP)]] is a programming paradigm based on the concept
of *objects*, which are data structures that contain data, in the form of
fields, often known as attributes; and code, in the form of procedures, often
known as methods.
** Terminology
- Class :: A user-defined prototype for an object that defines a set of
           attributes that characterize any object of the class. The attributes
           are data members (class variables and instance variables) and
           methods, accessed via dot notation (e.g. x.size).
- Method :: A special kind of function that is defined in a class
            definition. (e.g. x.mean())
** Terminology
- Data member :: represents a variable or instance variable that holds data
                 associated with a class and its objects.
- Class variable :: is shared by all instances of a class. Class variables
    are defined within a class but outside any of the class's methods. Class
    variables aren't used as frequently as instance variables are. 
- Instance variable :: is defined inside a method and belongs only to the
     current instance of a class.
** Example - Human
#+begin_src python :results output :exports both :tangle lecture10.py 
class Human(object):
     
    # definition of a class variable
    population = 0 
     
    def __init__(self, name):
        # definition of an instance variable
        self.name = name
        Human.population += 1
    
    def say_hi(self):
        print("Hi, my name is {:}".format(self.name))

# make an instance of a class
jason = Human("Jason")
jason.say_hi()
#+end_src

#+RESULTS:
: Hi, my name is Jason

** Terminology
- Instance :: Represents an individual object of a certain class
- =__init__()= :: Special method, which is called class constructor or
                initialization method that Python calls when you create a new
                instance of this class.
- =__del__()= :: is a special method, which is called when an instance is destroyed;
             e.g. when it is no longer referenced.
** Example - Human
#+begin_src python :results output :exports both :tangle lecture10.py
class Human(object):
     
    def __init__(self, name):
        self.name = name
        print("I can see the light")
    
    def say_hi(self):
        print("Hi, my name is {:}".format(self.name))
    
    def __del__(self):
        print("Bye bye")

jason = Human("Jason")
jason.say_hi()
del jason
#+end_src

#+RESULTS:
: I can see the light
: Hi, my name is Jason
: Bye bye

** self = reference to current instance
- When defining your class methods, you must explicitly list =self= as the first
  argument for each method.
- However, when you call your class method from outside, you do not specify
  anything for the self argument; you skip it entirely, and Python automatically
  adds the instance reference for you
** Inheritance, Encapsulation and Polymorphism
- Encapsulation :: refers to the creation of self-contained modules that bind
  processing functions to the data.
- Inheritance (passes "knowledge") :: Classes are created in hierarchies, and
     inheritance lets the structure and methods in one class pass down the
     hierarchy. That means less programming is required when adding functions to
     complex systems. The ability to reuse existing objects is considered a
     major advantage of object technology.
** Inheritance, Encapsulation and Polymorphism
- Polymorphism (takes any shape) :: Object-oriented programming lets programmers
     create procedures for objects whose exact type is not known until
     runtime. It is the provision of a single interface to entities of different
     types.
* Encapsulation
In programming languages, encapsulation is used to refer to one of two related
but distinct notions, and sometimes to the combination thereof:
- A language mechanism for restricting access to some of the object's
  components.
- A language construct that facilitates the bundling of data with the methods
  (or other functions) operating on that data.
** Encapsulation in Python
- Python does not really support encapsulation because it does not support data
  hiding through private and protected members (like e.g. Java, C++).
- However some pseudo-encapsulation can be done. 
  - e.g. with double underline, i.e. =__attrName=, it can be referred to within
    the class itself as =self.__ attrName=, but outside of the class, it is
    named =object._className__attrName=
- Therefore, while it can prevent accidents, this pseudo-encapsulation cannot
  really protect data from hostile code.
- This works for attributes and methods
** Example - Human
#+begin_src python :results output :exports both :tangle lecture10.py
class Human(object):
    def __init__(self, name, age):
        self.name = name
        self.__age = age

jason = Human("Jason", 33)
print("Name: {:}".format(jason.name))
print("Age: {:}".format(jason._Human__age))
# print("Age {:}".format(jason.age))
#+end_src

#+RESULTS:
: Name: Jason
: Age: 33

* Inheritance
In object-oriented programming, inheritance is when an object or class is based
on another object or class, using the same implementation (inheriting from a
class) specifying implementation to maintain the same behavior (realizing an
interface; inheriting behavior). A mechanism to transfer the characteristics
of a class to other classes that are derived from it.
** Example - Human

#+begin_src python :results output :exports both :tangle lecture10.py
class Human(object):
    def __init__(self, name, age):
        self.name = name
        self.age = age
    def say_hi(self):
        print("Hi, my name is {:}".format(self.name))

class Student(Human):
    def say_hi(self):
        print("Hey, I'm {:} and {:}".format(self.name, self.age))

class Teacher(Human):
    def say_bye(self):
        print("Bye")

jason = Student("Jason", 22)
jason.say_hi()
betty = Teacher("Betty", 44)
betty.say_hi()
betty.say_bye()
#+end_src

#+RESULTS:
: Hey, I'm Jason and 22
: Hi, my name is Betty
: Bye

* Function overloading 
Function overloading (or method overloading) is the ability to create multiple
methods of the same name with different implementations. Calls to an overloaded
function will run a specific implementation of that function appropriate to the
context of the call, allowing one function call to perform different tasks
depending on context.  
** Example - Pizza

#+begin_src python :results output :exports both :tangle lecture10.py
import math

class Pizza(object):
    def __init__(self, radius):
        self.radius = radius
    def cf(self):
        return 2 * math.pi * self.radius
    def __str__(self):
        return "CF={:4.2f}".format(self.cf())

class Calzone(Pizza):
    def cf(self):
        c = super(Calzone, self).cf()
        return c / 2. + 2 * self.radius

p = Pizza(10)
print(p)
p2 = Calzone(10)
print(p2)
#+end_src

#+RESULTS:
: CF=62.83
: CF=51.42

** Special function to overload
- [[https://docs.python.org/2/reference/datamodel.html#basic-customization][String representation]]
  - =__str__()=, =__repr__()=, =__unicode__()=
- [[https://docs.python.org/2/reference/datamodel.html#customizing-attribute-access][Customize attribute access]] 
  - =__setattr__()=, =__getattr__()=, =__delattr__()=

* Operator overloading
In programming, operator overloading (less commonly known as operator ad hoc
polymorphism) is a specific case of polymorphism, where different operators have
different implementations depending on their arguments. Operator overloading is
generally defined by the language, the programmer, or both.
** Example - Vector
#+begin_src python :results output :exports both :tangle lecture10.py
import math

class Vector(object):

    def __init__(self, *args):
        self.coords = args

    def __str__(self):
        return str(self.coords)

    def __add__(self, other):
        coords = tuple(map(sum, zip(self.coords, other.coords)))
        return Vector(*coords)

    def __getitem__(self, index):
        return self.coords[index]

v1, v2 = Vector(2, 10), Vector(5, -2)
print v1 + v2
print v2[1], v2.coords[1]
#+end_src

#+RESULTS:
: (7, 8)
: -2 -2

** Operators to overload
  - =__pos__()=, =__neg__()=, =__inv__()=, =__abs__()=, =__len__()=
  - =__add__()=, =__sub__()=, =__and__()=, =__or__()=, =__xor__()=, ...
* Static methods
- Static methods are a special case of methods. 
- Sometimes, you'll write code that belongs to a class, but that doesn't use the
  object itself at all. 
- Static methods have no =self= argument and don't require you to instantiate
  the class before using them

** Example - Human

#+begin_src python :results output :exports both :tangle lecture10.py
class Human(object):
     
    population = 0 
      
    def __init__(self, name):
        self.name = name
        Human.population += 1
     
    @staticmethod
    def how_many():
        print("Population: {:}".format(Human.population))
     
    def __del__(self):
        Human.population -= 1

jason = Human("Jason")
betty = Human("Betty")
jason.how_many()
robin = Human("Robin")
Human.how_many()
#+end_src

#+RESULTS:
: Population: 2
: Population: 3

* Duck typing
- In computer programming with object-oriented programming languages, [[http://en.wikipedia.org/wiki/Duck_typing][duck
  typing]] is a layer of programming language and design rules on top of typing.
- The name of the concept refers to the duck test, attributed to James Whitcomb
  Riley, which may be phrased as follows:
#+begin_quote
When I see a bird that walks like a duck and swims like a duck and quacks like a
duck, I call that bird a duck.
#+end_quote
** Duck typing in Python
#+begin_src python :results output :exports both :tangle lecture10.py
class Duck(object):
    def quack(self):
        print "Quack, quack!"
    def fly(self):
        print "Flap, Flap!"
 
class Person(object):
    def quack(self):
        print "I'm Quackin'!"
    def fly(self):
        print "I'm Flyin'!"

def in_the_forest(mallard):
    mallard.quack()
    mallard.fly()
 
in_the_forest(Duck())
in_the_forest(Person())
#+end_src

#+RESULTS:
: Quack, quack!
: Flap, Flap!
: I'm Quackin'!
: I'm Flyin'!

* Built-in class attributes
- =__dict__= :: Dictionary containing the class's namespace
- =__doc__= :: Class documentation string (or None if not defined)
- =__name__= :: Class name
- =__module__= :: Module in which the class is defined (this is __main__ in
                  interactive mode)
- =__bases__= :: A possibly empty tuple containing the base classes, in the
                 order of their occurrence in the base class list

** Example - Employee
#+begin_src python :results output :exports both :tangle lecture10.py
class Employee(object):
    """
    Class docstring.
    """
    def __init__(self, name, salary):
        self.name = name
        self.salary = salary

print "Employee.__doc__:", Employee.__doc__
print "Employee.__name__:", Employee.__name__
print "Employee.__module__:", Employee.__module__
print "Employee.__bases__:", Employee.__bases__
print "Employee.__dict__:", Employee.__dict__
#+end_src

#+RESULTS:
: Employee.__doc__: 
:     Class docstring.
:     
: Employee.__name__: Employee
: Employee.__module__: __main__
: Employee.__bases__: (<type 'object'>,)
: Employee.__dict__: {'__module__': '__main__', 'empCount': 0, '__dict__': <attribute '__dict__' of 'Employee' objects>, '__weakref__': <attribute '__weakref__' of 'Employee' objects>, '__doc__': '\n    Class docstring.\n    ', '__init__': <function __init__ at 0x7f125c6bfcf8>}

* More stuff
- Functions like =issubclass(sub,sup)=, =isinstance(obj, Class)=, ...
- Subclass from several parents 
  - =class SubClassName (ParentClass1[, ParentClass2, ...])=
- Defining class methods or abtract methods
- Inheritance from build-in types (e.g. lists, dicts)
- Metaclasses, class factory, descriptors
* Exercise
Create a python module implementing 
- =class Shape(object)=
  - Instance variable: color
- =class Rectangle(Shape)=
  - Instance variable: width, height
  - Methods: calculate_area()
- =class Circle(Shape)=
  - Instance variable: radius
  - Methods: calculate_area()
** Solution                                                       :noexport:
#+begin_src python :results output :exports both :tangle lecture10.py :session *pylect10solution*
import numpy as np

class Shape(object):
    numberOfShapes = 0
     
    def __init__(self, color):
        self.color = color
        Shape.numberOfShapes += 1
    
    @staticmethod
    def howMany():
        return Shape.numberOfShapes
#+end_src

** Solution                                                       :noexport:
#+begin_src python :results output :exports both :tangle lecture10.py :session *pylect10solution*
class Rectangle(Shape):
    
    def __init__(self, color, width, height):
        super(Rectangle, self).__init__(color)
        self.width = width
        self.height = height
    
    def calculateArea(self):
        return self.width * self.height
    
    def calculateCircumference(self):
        return 2 * (self.width + self.height)
#+end_src
** Solution                                                       :noexport:
#+begin_src python :results output :exports both :tangle lecture10.py :session *pylect10solution*
class Circle(Shape):
    
    def __init__(self, color, radius):
        super(Circle, self).__init__(color)
        self.radius = radius
    
    def calculateArea(self):
        return np.pi * self.radius ** 2
    
    def calculateCircumference(self):
        return 2* np.pi * self.radius
#+end_src
** Solution                                                       :noexport:

#+begin_src python :results output :exports both :tangle lecture10.py :session *pylect10solution*
rect1 = Rectangle('red', 10, 10)
circ1 = Circle('blue', 2)

print rect1.calculateCircumference()
print circ1.calculateArea()
print circ1.howMany()
#+end_src
