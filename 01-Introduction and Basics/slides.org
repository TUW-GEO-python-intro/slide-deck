#+OPTIONS: reveal_center:t reveal_control:t reveal_height:-1
#+OPTIONS: reveal_history:nil reveal_keyboard:t reveal_mathjax:nil
#+OPTIONS: reveal_overview:t reveal_progress:t
#+OPTIONS: reveal_rolling_links:nil reveal_slide_number:t
#+OPTIONS: reveal_title_slide:t reveal_width:-1
#+options: toc:nil num:nil
#+REVEAL_MARGIN: -1
#+REVEAL_MIN_SCALE: -1
#+REVEAL_MAX_SCALE: -1
#+REVEAL_ROOT: ../reveal.js
#+REVEAL_TRANS: default
#+REVEAL_SPEED: default
#+REVEAL_THEME: black
#+REVEAL_EXTRA_CSS: ../code_formatting.css
#+REVEAL_EXTRA_JS: 
#+REVEAL_HLEVEL: 1
#+REVEAL_TITLE_SLIDE_TEMPLATE: <h1>%t</h1> <h2>%a</h2> <h2>%e</h2> <h2>%d</h2>
#+REVEAL_TITLE_SLIDE_BACKGROUND:
#+REVEAL_TITLE_SLIDE_BACKGROUND_SIZE:
#+REVEAL_TITLE_SLIDE_BACKGROUND_REPEAT:
#+REVEAL_TITLE_SLIDE_BACKGROUND_TRANSITION:
#+REVEAL_MATHJAX_URL: http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+REVEAL_PREAMBLE:
#+REVEAL_HEAD_PREAMBLE:<script src="../skulpt_python/skulpt.min.js" type="text/javascript"></script> <script src="../run_interpreter.js" type="text/javascript"></script> <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js"> </script>
#+REVEAL_POSTAMBLE:
#+REVEAL_MULTIPLEX_ID:
#+REVEAL_MULTIPLEX_SECRET:
#+REVEAL_MULTIPLEX_URL:
#+REVEAL_MULTIPLEX_SOCKETIO_URL:
#+REVEAL_PLUGINS:

#+AUTHOR: 
#+email: 
#+Title: Python Programming for Geoscience

* Course Organization

** Four lecturers

- Hahn Sebastian
- Karel Wilfried
- Mandelburger Gottfried
- Paulik Christoph

** How to get a grade

There will be two/three small projects. 
- Short report
- Source code
- Short talk about the project with the lecturer.

** Technical stuff
- We will use the [[https://www.continuum.io/downloads#all][Anaconda Python Distribution]] (Win, Linux, OSX)
- You can start the download/installation now.

** Course Materials
- Materials (slides ,code examples, ...) will be on [[https://github.com/TUW-GEO-python-intro/slide-deck][Github]]. See the Readme there for
  more details.
- Exercise 1 will be on Github and might consist of several parts. (like Homework)
 
* Version Control 
Who of you has worked with version control 

(CVS, SVN, Git ...) ? 
#+ATTR_HTML: :width 80%
#+LABEL: fig:git-flow
[[./git-branch.png]]

** Git Basics

#+ATTR_html: :width 25%
#+LABEL: fig:git-manliest-man
[[./don't-always-use-vc-but-when-git.jpg]]

Do yourselves a favor and learn Git. 
It will make your lives easier.

There will be a lecture after the course in week 3.
 
[[https://help.github.com/articles/good-resources-for-learning-git-and-github/][List
of Tutorials]]

** Github
[[http://www.github.com][Github]] is a code hosting site which is the the most popular solution for hosting
open source projects at the moment.

* What is Programming

- Programming is breaking problems into simple steps.
- Simple steps a computer can understand.
- Think about giving directions to somebody.

** Statement
- An instruction is called a statement
- e.g. Add two numbers together
- set variable to a value
Python
#+begin_src python
x = 1
#+end_src
Javascript
#+begin_src javascript
var x = 1;
#+end_src
C
#+begin_src C
int x = 1;
#+end_src

* What is Python 

#+BEGIN_QUOTE
Python is an easy to learn, powerful programming
language.

-- Python Tutorial first sentence
#+END_QUOTE

** 
Developed by Guide van Rossum , early 1990^s
#+ATTR_html: :width 20%
#+LABEL: fig:guide-python
[[./guido_python.jpg]]

- Benevolent Dictator For Life (BDFL) of the Python community.
- Worked at Google, now at Dropbox
- Named Python after Monthy Python

** Language overview
- General purpose :: can write anything from websites (Youtube, Reddit...) to scientific code.
- High Level :: Strong abstraction from inner workings of the computer,
     e.g. no memory management. [[[http://en.wikipedia.org/wiki/High-level_programming_language][wiki]]]
- Interpreted :: executes instructions directly, no compilation 
                 [[[http://en.wikipedia.org/wiki/Interpreted_language][wiki]]]
- Multi paradigm :: Object oriented, functional, imperative or
    procedural styles are supported

** Language overview
- Dynamically typed ::  Variable types are checked during execution.
- Strongly typed :: a variable has a specific type
- Modular :: Python modules must be imported to be used
- Multi Platform :: Works on Linux, Mac OS, Windows, ...
- Batteries included :: Powerful standard library (e.g. file reading,
     URL parsing ...)

** Different versions
Currently Python 2.7 and 3.5 are the latest versions. 

Python 3 introduced some incompatible changes. Nowadays most 3rd party
packages should work on both versions.

[[https://wiki.python.org/moin/Python2orPython3][Python 2 or 3 Guide]]

[[http://python3wos.appspot.com/][List of most popular packages and
Python 3 status]]

We use Python 3.4 in this course.

* Getting started

- Install Anaconda in a directory of your choice. You can set it as the default
  if you do not have other Python installations on your system.
- Today: Open Anaconda Python command prompt and start typing
- Next lecture: For longer scripts you will need a text editor or a Python IDE
  - (non complete) list on [[https://github.com/TUW-GEO-python-intro/General-Information#editing-python-code][Website of the Course]]
- Python files have ~.py~  extension

** Command prompt
- Type ~python~ to enter the Python interpreter
- ~exit()~ or ~Ctrl-D~ to quit the interpreter
- every press of the return key executes a statement
#+begin_src python :results output pp :exports both
print("Hello World!")
#+end_src

#+RESULTS:
: Hello World!


* Python Syntax

#+caption: Whitespace is important
#+begin_src python
# set variable x to 1
x = 1
if x == 1:
    """
    This condition checks if x is one and 
    prints it to stdout
    """
    print("x is one")
#+end_src

#+RESULTS:
: None

 
Use spaces if possible, be consistent in your code.

Check the Python Style Guide [[https://www.python.org/dev/peps/pep-0008/][PEP8]]

** Variables
Variables can be assigned without type declaration.

#+begin_src python :results output :exports both :tangle lecture1.py
a = 1
b = 2.8
c = "text"
print("a is", a)
print("b is", a)
print("c is", c)
c = a
print("c is", c)
#+end_src

#+RESULTS:
: a is 1
: b is 1
: c is text
: c is 1

#+ATTR_REVEAL: :frag grow highlight-red
Variable types can be changed. Careful!

** 
Variables are case sensitive

You can not use one of the predefined keywords. Should also not use [[https://docs.python.org/2/library/functions.html][python builtins.]]
#+begin_src python :results output :exports both :tangle lecture1.py
var1 = 5
Var1 = 6
print(var1, Var1)
import keyword
print(keyword.kwlist)
#+end_src

#+RESULTS:
: 5 6
: ['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']

** Python as a calculator

#+begin_src python :results output :exports both :tangle lecture1.py
  width = 20
  height = 5 * 9
  # calculate rectangular area
  rect_area = width * height
  print("Rectangular Area is", rect_area)

  # calcualte area of square
  square_area = width ** 2
  print("Square area is", square_area)
#+end_src

#+RESULTS:
: Rectangular Area is 900
: Square area is 400

** Data Types

These are some basic data types:
#+begin_src python
integer = 1
float_number = 1.345
complex_number = 3 + 4j
string = "a text string"
a_list = [1, 1.34, string]
a_tuple = (1, 1.34, string) # immutable list
a_set = set("mama") # list of unique items
a_dict = {'jan': 1, 'feb': 2}
a_boolean = True
none_type = None
#+end_src

#+RESULTS:
: None

[[https://docs.python.org/2/library/stdtypes.html][Official Python Documentation on data types]]

*** Integers and Floats

#+begin_src python :results output :exports both :tangle lecture1.py
print(1+4)
print(type(1+4))
print(type(1+4.)) # automatic conversion of resulting data type
#+end_src

#+RESULTS:
: 5
: <class 'int'>
: <class 'float'>

#+begin_src python :results output :exports both :tangle lecture1.py
# float and integer division
# this is different in Python 2
print("12 / 7 really is", 12/7.)
print(type(12/7.))
print("12 / 7 is", 12//7)
print(type(12//7))
#+end_src

#+RESULTS:
: 12 / 7 really is 1.7142857142857142
: <class 'float'>
: 12 / 7 is 1
: <class 'int'>

*** Comparisons
#+begin_src python :results output :exports both :tangle lecture1.py
#comparison
print("is 7 less than 5?" , 7<5)
print("is 5 less than 7?" , 7>5)
print("is 5 less or equal 5?" , 5<=5)
#+end_src

#+RESULTS:
: is 7 less than 5? False
: is 5 less than 7? True
: is 5 less or equal 5? True

*** Strings
#+begin_src python :results output :exports both :tangle lecture1.py
s1 = "Monthy"
s2 = 'Python' #single quotes are also fine
# joining string can be done in different ways
print(s1+s2, s1*3, ";".join([s1, s2]))
#+end_src

#+RESULTS:
: MonthyPython MonthyMonthyMonthy Monthy;Python

#+begin_src python :results output :exports both :tangle lecture1.py
# sometimes double quotes are necessary
print("This wouldn't work with single quotes")
# or the ' has to be escaped using \
print('Escaping "wouldn\'t" also works')
#+end_src

#+RESULTS:
: This wouldn't work with single quotes
: Escaping "wouldn't" also works

*** String slicing

- slice syntax is [start:stop:step]
- start is inclusive, stop is exclusive
#+begin_src python :results output :exports both :tangle lecture1.py
s = "0123456789"
print(s[1:4])
print(s[3:8])
print(s[-1])
print(s[-6:-3])
print(s[0:5:2])
print("negative step reverts", s[::-1])
#+end_src

#+RESULTS:
: 123
: 34567
: 9
: 456
: 024
: negative step reverts 9876543210


# *** Test interpreter
# #+REVEAL_HTML: <textarea cols="40" rows="4" style="font-size:0.8em">
# #+REVEAL_HTML: print(2*3)
# #+REVEAL_HTML: </textarea>
# #+REVEAL_HTML:     <br/>
# #+REVEAL_HTML:     <button onclick="run(this);" class="btn btn-primary large">Run</button>
# #+REVEAL_HTML:     <button onclick="clear_output();" class="btn btn-danger large">Clear</button>
# #+REVEAL_HTML: <pre style="height:200px; scroll: true">
# #+REVEAL_HTML: </pre>

*** Lists


#+begin_src python :results output pp :exports code :session lists :tangle lecture1.py
winter = ['jan', 'feb']
spring = ['apr', 'may', 'jun']
summer = ['jul', 'aug', 'sep']
autumn = ['oct', 'nov', 'dec']
# create one list containing all the elements
months = winter + spring + summer + autumn
print("List of months", months)
# create a nested list, list of seasons
seasons = [winter, spring, summer, autumn]
print("List of seasons", seasons)
#+end_src

# add literal example here since outputed code in session mode can be
# ugly sometimes
#+end_example:
: List of months ['jan', 'feb', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']
: List of seasons [['jan', 'feb'], ['apr', 'may', 'jun'], ['jul', 'aug', 'sep'], ['oct', 'nov', 'dec']]
#+end_example:

What happens if we add the missing month of March?

*** 

#+begin_src python :results output pp :exports both :tangle lecture1.py :session lists
winter.append('mar')
print("Winter is now:", winter)
print("List of months", months)
print("List of seasons", seasons)
#+end_src

#+RESULTS:
: 
: Winter is now: ['jan', 'feb', 'mar']
: List of months ['jan', 'feb', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']
: List of seasons [['jan', 'feb', 'mar'], ['apr', 'may', 'jun'], ['jul', 'aug', 'sep'], ['oct', 'nov', 'dec']]

Lists are generally stored as references -> the values are not copied.

*** List manipulation and slicing

#+begin_src python :results output pp :exports both :tangle lecture1.py :session lists
months.insert(2, 'mar') # insert a element before index 2
print(months)
print(months[::2]) # slicing works the same as with strings
print(months[8:11])
#+end_src

#+RESULTS:
: 
: ['apr', 'aug', 'mar', 'dec', 'feb', 'jan', 'jul', 'jun', 'mar', 'mar', 'may', 'nov', 'oct', 'sep']
: ['apr', 'mar', 'feb', 'jul', 'mar', 'may', 'oct']
: ['mar', 'mar', 'may']


*** List manipulation 
#+begin_src python :results output pp :exports both :tangle lecture1.py
  li = [1, 4, 8.33, 3.6, 19, 12]
  print(li.index(3.6))  # get the index of a element
  print(li[li.index(3.6)])  # this index can be used to address the list
  li.sort()  # sort the list
  print(li)
  #remove elements from list
  del li[2]
  print("removed index 2:", li)
  li.pop(2)
  print("removed index 2 again:", li)
#+end_src

#+RESULTS:
: 3
: 3.6
: [1, 3.6, 4, 8.33, 12, 19]
: removed index 2: [1, 3.6, 8.33, 12, 19]
: removed index 2 again: [1, 3.6, 12, 19]

for even more list related functions see
[[https://docs.python.org/2/tutorial/datastructures.html][the documentation]]

*** Sets - unique elements and set operations
#+begin_src python :results output pp :exports both :tangle lecture1.py
  m, p = set('mama'), set('papa')
  print(m)
  print(p)
  print("Union, m or p", m | p)
  print("Intersection, m and p", m & p)
  print("Difference, m minus p", m - p)
  print("Symetric Difference", m ^ p) # elements in either one but not both sets
#+end_src

#+RESULTS:
: {'a', 'm'}
: {'a', 'p'}
: Union, m or p {'a', 'm', 'p'}
: Intersection, m and p {'a'}
: Difference, m minus p {'m'}
: Symetric Difference {'m', 'p'}

More information in the [[https://docs.python.org/2/library/stdtypes.html#set][documentation]]

*** Dictionaries

Key value pairs of any data type. Not ordered.

#+begin_src python :results output pp :exports both :tangle lecture1.py
d = {'integer': 7, 'string': "test", 1: [1, 2, 3]}
print(d)
print(d[1])
print(d['integer']) # get a value by the key
print(d.keys()) # list of the keys
print('integer' in d) # test for presence of key 
#+end_src

#+RESULTS:
: {'string': 'test', 1: [1, 2, 3], 'integer': 7}
: [1, 2, 3]
: 7
: dict_keys(['string', 1, 'integer'])
: True

*** 

#+begin_src python :results output pp :exports both :tangle lecture1.py
# keys can be any hashable(unique) object
d1 = {(1, 2): "tuple with 1 and 2",
      (1, 3): "tuple with 1 and 3"}
print(d1[(1, 2)])

# add element to dictionary
d1['additional element'] = "I am new"
print(d1)
# delete it again
del d1['additional element']
print(d1)
#+end_src

#+RESULTS:
: tuple with 1 and 2
: {(1, 2): 'tuple with 1 and 2', 'additional element': 'I am new', (1, 3): 'tuple with 1 and 3'}
: {(1, 2): 'tuple with 1 and 2', (1, 3): 'tuple with 1 and 3'}

*** 
Dictionary update
#+begin_src python :results output pp :exports both :tangle lecture1.py
d1 = {"one": 1, "two": 2}
d2 = {"two": "II", "three": "III"}
d1.update(d2)
print(d1)
#+end_src

#+RESULTS:
: {'one': 1, 'three': 'III', 'two': 'II'}

#+begin_src python :results output pp :exports both :tangle lecture1.py
answer_dict = {True: 'yes', False: 'no'}
print("is 7 less than 5?" , answer_dict[False])
print("is 7 less than 5?" , answer_dict[7<5])
#+end_src

#+RESULTS:
: is 7 less than 5? no
: is 7 less than 5? no

* Homework

- Try out a few text editors / IDE's and choose one you like.
  - (non complete) list on [[https://github.com/TUW-GEO-python-intro/General-Information#editing-python-code][Website of the Course]]






 
