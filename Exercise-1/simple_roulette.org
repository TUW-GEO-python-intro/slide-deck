#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t c:nil
#+OPTIONS: creator:comment d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:t p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t timestamp:t
#+OPTIONS: toc:nil todo:t |:t
#+TITLE: 120.050 Introduction to Python programming for geoscience - Exercise 1
#+DATE: 2015-03-23
#+AUTHOR: Christoph Paulik
#+EMAIL: christoph.paulik@geo.tuwien.ac.at
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.4.1 (Org mode 8.3beta)
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA:

* Roulette Game

For our first exercise we will implement a simple:
#+begin_src shell :results code pp :exports results
# from pyfiglet import Figlet
# f = Figlet(font="slant")
# print f.renderText("Terminal")
# print f.renderText("Roulette")
figlet -c Terminal -f slant
figlet -c Roulette -f slant
#+end_src
#+RESULTS:
#+begin_example
                    ______                    _             __
                   /_  __/__  _________ ___  (_)___  ____ _/ /
                    / / / _ \/ ___/ __ `__ \/ / __ \/ __ `/ / 
                   / / /  __/ /  / / / / / / / / / / /_/ / /  
                  /_/  \___/_/  /_/ /_/ /_/_/_/ /_/\__,_/_/   
                                                              
                        ____              __     __  __     
                       / __ \____  __  __/ /__  / /_/ /____ 
                      / /_/ / __ \/ / / / / _ \/ __/ __/ _ \
                     / _, _/ /_/ / /_/ / /  __/ /_/ /_/  __/
                    /_/ |_|\____/\__,_/_/\___/\__/\__/\___/ 
                                                            
#+end_example

If you are not familiar with Roulette please consult the [[http://en.wikipedia.org/wiki/Roulette][Wikipedia]] article on
the topic. We will be using French Roulette rules meaning that the possible
numbers that can come up are from zero to 36. When number zero comes then
everybody loses unless they bet on zero.

#+CAPTION: Layout of a French Roulette game from [[http://en.wikipedia.org/wiki/Roulette\#/media/File:French_Layout-Single_Zero_Wheel.jpg][Wikipedia]] 
#+ATTR_LaTeX: :width 0.9\linewidth :options angle=90
#+LABEL: fig:roulette_table
[[./French_Layout-Single_Zero_Wheel.jpg]]


Since a complete implementation of the game would be too complex
we will limit ourselves to these bets taken from [[http://en.wikipedia.org/wiki/Roulette#Types_of_bets][Wikipedia]]:

- Straight (or Single) :: a bet on a single number [35 to 1] 
- 1 to 18 (Manque) :: a bet on one of the first 18 numbers. [1 to 1]
- 19 to 36 (Passe) :: a bet on the high 18 numbers. [1 to 1]
- Red or Black (Rouge ou Noir) :: a bet on which color the roulette wheel will
     show. [1 to 1]
- Even or odd (Pair ou Impair) :: a bet on even or odd nonzero number. [1 to 1]
- Dozen Bets :: a bet on the first 12 (1-12), second 12 (13-24) or third 12
     (25-36) numbers. [2 to 1]
- Column Bets :: a bet on one of the three vertical lines e.g.: 1-4-7-10 ... [2
     to 1]

The numbers in [ ] represent the payout of each bet. For example [2 to 1] means
that you get 2 times the amount you bet from the bank, e.g.: you bet 1€ on the
first dozen numbers; number 7 comes up so you get 2€ from the bank and you have
3€ total.

* Program Interface
1. The program should start by asking the player for the following information:
   - Name
   - Amount of money they brought to the Roulette table.
2. After that the program should ask for the type of bet the player wants to
   play (see list above). Show the options to the player. Also include an option
   to quit the program.
3. When a bet type is selected ask for the bet. Depending on the bet this input 
   will have different meanings so list the possibilities to the player. Make
   sure the player does not bet more money than he has.
4. "Rotate" the Roulette wheel and show the result to the player. Also show the
   amount won or lost and the updated amount of money the player has left. Start
   again at step 2.

* Python hints
All needed modules an data structures can be found in the Python standard library.

** Useful code snippets
#+caption: This snippet clears the screen of a terminal
#+begin_src python
import os
os.system('cls' if os.name == 'nt' else 'clear')
#+end_src

* Reporting
The following is required when handing in the exercise:
- A short (1-3) pages report explaining what the program is doing, its structure and how the
  functions and/or modules work together. Somebody reading this document should
  find it easy to start reading the source code. *No source code* in this
  document. This can also be a simple README text file.
- *Documented* python source code.

After I had a chance to look at the source code I will make appointments with
each group to have a short (10-15 min) talk about the exercise.
Hand in of the exercise will be handled in TUWEL.

** Due Date
Please hand in the exercise by 2015-04-13.



