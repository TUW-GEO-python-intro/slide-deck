#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t c:nil
#+OPTIONS: creator:comment d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:t p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t timestamp:t
#+OPTIONS: toc:nil todo:t |:t
#+TITLE: Exercise 2 - Treasure Hunt
#+DATE: 2015-05-26
#+AUTHOR: Sebastian Hahn
#+EMAIL: sebastian.hahn@geo.tuwien.ac.at
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.4.1 (Org mode 8.3beta)
#+LATEX_CLASS: koma-article
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \geometry{a4paper, textwidth=6.5in, textheight=10in, marginparsep=7pt, marginparwidth=.6in}
#+LATEX_HEADER_EXTRA:

* Treasure Hunt
The second exercise is a treasure hunt based on common sense and your ability to
work with files, arrays and plotting functions. In general, a treasure hunt is
one of many different types of games which can have one or more players who try
to find hidden articles, locations or places by using a series of
clues. However, this time the game takes place in the virtual world, where
bytes, bits and mainly your Python skills are important.

** Game instructions
In the following treasure hunt you have to answer short riddles concealing file
names, column names or positions. The files are written in random formats
(e.g. .csv, .npz, .nc) and their content might contain information useful for
the next clue. All files can be downloaded from [[http://rs.geo.tuwien.ac.at/downloads/cpa/]],
however, you will only be able to download a file once knowing its correct file
name. All names are lowercase.

** Clues
1. Please download ~filename1.csv~ and read ~column1~ at row number ~row1~,
   which will give you ~filename2part1~. Prove the solution of riddle ~row1~
   with a histogram.
   - ~filename1.csv~: /It has 4 legs but cannot walk./
   - ~column1~: /Young I'm tall, old I'm short, I love to glow, breath is my
     foe./
   - ~row1~: /What digit is the most frequent between the numbers 1 and 1000?/

2. Please download ~filename2part1_filename2part2.nc~, which is a treasure
   map. Read and plot ~variable2~. Which capital city has been marked? The
   answer to this question will give you ~filename3part1~.
   - ~filename2part2~: /Stay hungry, stay ......, Steve Jobs/
   - ~variable2~: /May the ..... be with you, Han Solo/

3. Please download ~filename3part1_filename3part2.npy~ and read ~variable3~. In
   ~row3~ you will find ~filename4.bin~.

   - ~filename3_part2~: /What planet has the shortest year?/
   - ~variable3~: /I'll be ...., Arnold Schwarzenegger/
   - ~row3~: Mean of ~column3~ in the file ~filename1.csv~.
   - ~column3~: /An ..... a day keeps the doctor away!/

4. Please download ~filename4.bin~. The first 107 bytes will tell you how to
   read the rest of the file. 
  
5. Finally you have to generate a HDF5 file on your own representing the final
   treasure map. The file needs to have 3 variables: ~longitude~, ~latitude~ and
   ~dataset~. You should be able to generate a plot from your file and find the
   name of the island where the treasure can be found.

   - ~longitude~: data can be found in ~filename1.csv~ in ~column5~
   - ~latitude~: data can be found in ~filename3.npy~ in ~variable5a~
   - ~dataset~: data can be found in ~filename4.bin~ in ~variable5b~
   - ~column5~: /Alive without breath, as cold as death; never thirsty, ever
     drinking, all in mail, never clinking./
   - ~variable5a~: /What gets wetter and wetter the more it dries?/
   - ~variable5b~: /What is black and white and red all over?/

** Files for exercise                                              :noexport:

#+begin_src python :results output pp :exports none
import pandas as pd
import numpy as np
import netCDF4
import matplotlib.pyplot as plt
from mpl_toolkits.basemap import Basemap

# clue 1
# filename1: table
# column1: candle
# row1: 1
filename = 'table.csv'
size = 360 * 180
final_lons, final_lats = np.meshgrid(
    np.arange(-180, 180), np.arange(90, -90, -1))

s = pd.DataFrame({'apple': np.linspace(0, 200, size),
                  'fish': final_lons.flatten(),
                  'candle': np.arange(size) * 22 + 9,
                  'water': np.arange(size) * 21 + 4,
                  'dragon': np.arange(size) * 12 + 2})
s.to_csv(filename, index=False)
print("Wrote file {:}".format(filename))

# clue 2
# filename2: 9_foolish
# variable2: force
filename = '9_foolish.nc'

lats = np.arange(90, -90, -1)
lons = np.arange(-180, 180)
temp = np.zeros((lats.size, lons.size))

# ottawa, madrid, canberra, beijing, stockholm
locations = [(45, -75), (40, -3), (-35, 149), (40, 116), (59, 18)]
names = ['light', 'power', 'force', 'darkness', 'devi']
datasets = []

for location in locations:
    var = temp.copy()
    var[90 - location[0], 180 + location[1]] = 1
    datasets.append(var)

with netCDF4.Dataset(filename, 'w', format='NETCDF4') as nc:
    lat = nc.createDimension('lat', lats.size)
    lon = nc.createDimension('lon', lons.size)

    lat_var = nc.createVariable('lat', lats.dtype.name, ('lat',))
    lat_var[:] = lats

    lon_var = nc.createVariable('lon', lons.dtype.name, ('lon'))
    lon_var[:] = lons

    for dataset, name in zip(datasets, names):
        var = nc.createVariable(name, dataset.dtype.name, ('lat', 'lon'))
        var[:] = dataset

print("Wrote file {:}".format(filename))

m = Basemap()
_ = m.drawcoastlines()

with netCDF4.Dataset(filename, 'r', format='NETCDF4') as nc:
    data = nc.variables['force'][:].flatten()
    lat = nc.variables['lat'][:]
    lon = nc.variables['lon'][:]

valid = data != 0
lons, lats = np.meshgrid(lon, lat)
x, y = m(lons.flatten(), lats.flatten())
_ = m.scatter(x[valid], y[valid], c=data[valid], s=135,
              edgecolor='none', cmap=plt.get_cmap('gist_rainbow'))
_ = plt.colorbar()

# clue 3
# filename3: canberra_mercury.npz
# variable3: back
# row3: 100
# column3: apple
filename = 'canberra_mercury.npz'

size = 360 * 180
big = np.random.randint(0, 1000, size=size)
rich = np.random.randint(0, 1000, size=size)
here = np.random.randint(0, 1000, size=size)
coming = np.random.randint(0, 1000, size=size)
towel = final_lats.flatten()
back = np.linspace(0, 1000, size) * 3 + 20
back[100] = 101010

np.savez(filename, big=big, rich=rich, back=back,
         here=here, coming=coming, towel=towel)
print("Wrote file {:}".format(filename))

filename = 'table.csv'
f = pd.read_csv(filename)
# print("Mean of apple {:}".format(f['apple'].mean()))
# print("In row3: {:}".format(back[100]))

# clue 4
# filename4: 101010.bin
filename = '101010.bin'
data = np.zeros((180, 360), dtype=[('sunburnedpenguin', np.int16),
                                   ('newspaper', np.int16),
                                   ('redzebra', np.int16),
                                   ('embarresedskunk', np.int16)])

# , madagascar, new zealand, cuba
locations = [(37, 14, 'sunburnedpenguin'), (-18, 47, 'newspaper'),
             (-41, 175, 'redzebra'), (24, -82, 'embarresedskunk')]

for location in locations:
    data[location[2]][90 - location[0], 180 + location[1]] = 1

with open(filename, 'w') as f:
    f.write('dtype({:})'.format(data.dtype))
    data.tofile(f)

print("Wrote file {:}".format(filename))

plt.figure()
m = Basemap()
_ = m.drawcoastlines()

loc = 'newspaper'
valid = data[loc].flatten() != 0
x, y = m(final_lons.flatten(), final_lats.flatten())
_ = m.scatter(x[valid], y[valid], c=data[loc].flat[valid], s=135,
              edgecolor='none', cmap=plt.get_cmap('gist_rainbow'))

filename = '101010.bin'
with open(filename, 'r') as f:
    dtype="np."+f.read(107)
    data = np.fromfile(f, dtype=eval(dtype))

#+end_src

#+RESULTS:
: Wrote file table.csv
: Wrote file 9_foolish.nc
: Wrote file canberra_mercury.npz
: Wrote file 101010.bin

* Program Interface
No special interface is required. The program can be a simple script with
functions reading the various files.
* Reporting
The following is required when handing in the exercise:
- *Documented* python source code, 
- *plots* of the treasure maps and
- a *text file* with all answers.

After I had a chance to look at the source code I will make appointments with
each group to have a short (10-15 min) talk about the exercise.
Hand in of the exercise will be handled in TUWEL.
** Due Date
Please hand in the exercise by 2015-06-15.



