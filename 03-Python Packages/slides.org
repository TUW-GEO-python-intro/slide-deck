#+OPTIONS: reveal_center:t reveal_control:t reveal_height:-1
#+OPTIONS: reveal_history:nil reveal_keyboard:t reveal_mathjax:nil
#+OPTIONS: reveal_overview:t reveal_progress:t
#+OPTIONS: reveal_rolling_links:nil reveal_slide_number:t
#+OPTIONS: reveal_title_slide:t reveal_width:-1
#+options: toc:nil ^:nil num:nil
#+REVEAL_MARGIN: -1
#+REVEAL_MIN_SCALE: -1
#+REVEAL_MAX_SCALE: -1
#+REVEAL_ROOT: ../reveal.js
#+REVEAL_TRANS: default
#+REVEAL_SPEED: default
#+REVEAL_THEME: black
#+REVEAL_EXTRA_CSS: ../code_formatting.css
#+REVEAL_EXTRA_JS: 
#+REVEAL_HLEVEL: 1
#+REVEAL_TITLE_SLIDE_TEMPLATE: <h1>%t</h1> <h2>%a</h2> <h2>%e</h2> <h2>%d</h2>
#+REVEAL_TITLE_SLIDE_BACKGROUND:
#+REVEAL_TITLE_SLIDE_BACKGROUND_SIZE:
#+REVEAL_TITLE_SLIDE_BACKGROUND_REPEAT:
#+REVEAL_TITLE_SLIDE_BACKGROUND_TRANSITION:
#+REVEAL_MATHJAX_URL: http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+REVEAL_PREAMBLE:
#+REVEAL_HEAD_PREAMBLE:
#+REVEAL_POSTAMBLE:
#+REVEAL_MULTIPLEX_ID:
#+REVEAL_MULTIPLEX_SECRET:
#+REVEAL_MULTIPLEX_URL:
#+REVEAL_MULTIPLEX_SOCKETIO_URL:
#+REVEAL_PLUGINS:

#+AUTHOR:
#+email: 
#+Title: Python Packages

* What are packages

** Packages and Modules
- Module :: .py file that contains functions/classes or variables
- Package :: Collection of python modules. Can be nested in folders

** Folders on Filesystem
- my_package
  - __init__.py
  - my_module.py
   
=__init__.py= tells python that the folder contains modules

code in =__init__.py= is executed during import!

http://docs.python.org/2/tutorial/modules.html

* Using Packages
- Packages have to be imported for the program to be able to use them
#+begin_src python :results output pp :exports code
import math # import complete module
import very_long_package_name as vlp # shorten the name 
from datetime import date # import only certain variables/classes/functions
#+end_src
- Avoid SRC_python[:exports code]{from package import *} -> dirty namespace

Example - Open =Anaconda Command Prompt= or =Shell=

* Where do I look for packages?

- [[http://docs.python.org/2/library/][Standard library]]
- [[https://pypi.python.org/pypi][Python Package Index (PyPI)]] (67508 packages last week)
- Search Engine „python <your problem here>“
  - Project websites
  - Stackoverflow
  - Blogs

* Important Standard Library packages

** datetime module
Representation of dates and times. [[https://docs.python.org/2.7/library/datetime.html][Documentation.]]

#+begin_src python :results output pp :exports both :tangle lecture3.py
from datetime import date
a = date(2015, 3, 1)
b = date.today()
print(a, b)
print(a.year, a.month, a.day) # attribute access
delta = b - a # difference are a datetime.timedelta object
print(delta)
print(type(delta))
#+end_src

*** datetime

#+begin_src python :results output pp :exports both :tangle lecture3.py
from datetime import date, datetime, timedelta, time
a = date(2008, 5, 1)
b = time(12, 30, 15)
print(datetime.combine(a, b))
print(datetime(2008, 5, 1, 12, 30, 16))
# parsing and formatting
dt = datetime.strptime("21/11/06 16:30", "%d/%m/%y %H:%M")
print(dt)
print(dt.strftime("%A, %d. %B %Y %I:%M%p"))
#+end_src

#+RESULTS:
: 2008-05-01 12:30:15
: 2008-05-01 12:30:16
: 2006-11-21 16:30:00
: Tuesday, 21. November 2006 04:30PM

[[https://docs.python.org/2.7/library/datetime.html#strftime-and-strptime-behavior][Formatting codes]]

There is also a [[https://docs.python.org/2.7/library/calendar.html][calendar]] module for e.g. leap year checking, getting days in a month.

** math module
Mathematical functions and constants.
#+begin_src python :results output pp :exports both :tangle lecture3.py
import math
print(math.pi, math.e)
print(math.radians(180), math.degrees(2 * math.pi))
print(math.sin(math.pi / 4))
#+end_src

[[https://docs.python.org/2.7/library/math.html][Docs]].

These is also cmath for complex numbers.

** os.path module

- path manipulation
- Takes care of correct slashes Unix / vs. Windows \

#+begin_src python :results output pp :exports both :tangle lecture3.py
import os
p = os.path.join("test", "path", "to", "file.txt") # relative path
print(p)
print(os.path.abspath(p)) # absolute path
# split into path and filename with extension
path, fname_ext = os.path.split(p) 
# split filename and extension
fname, extension = os.path.splitext(fname_ext) 
print(path, fname_ext, fname, extension)
#+end_src

#+RESULTS:
: test/path/to/file.txt
: /media/sf_C/Users/cpaulik/My Dropbox/Arbeit/Teaching/Python Course/for_students/03-Python Packages/test/path/to/file.txt
: ('test/path/to', 'file.txt', 'file', '.txt')


* Naming imported packages

#+begin_src python
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from scipy import optimize
#+end_src

- Check package documentation for recommendations
  - [[http://docs.scipy.org/doc/scipy/reference/api.html][e.g. Scipy guidelines]]
- mainly up to you 
- be consistent

* Where does Python look for packages?
[[http://docs.python.org/2/using/cmdline.html#envvar-PYTHONPATH][Environment variable]] PYTHONPATH 
- Can be set by
  - Manually in command prompt
  - IDE(e.g. PyScripter)
  - or python script (=sys.path= variable)
   
Example - Open =Anaconda Command Prompt.exe= or your =Shell=

** Demo
use the provided =my_code= folder as a basis for this demo.
- navigate to the =my_code/my_package= folder in you shell
- start a python interpreter
#+begin_src python 
import hello # this works because current path is searched
hello.function()
hello.variable
exit()
#+end_src

** the __init__.py file
- navigate to the =my_code= folder
- start a python interpreter
#+begin_src python
import my_package.hello as hello # will give error
exit()
#+end_src
- make a =__init__.py= file in the my_package folder and try again.

** code in __init__.py is executed
- fill the =__init__.py= with the following
#+begin_src python 
print("code in __init__.py is executed on import")
#+end_src
Then try importing again.
#+begin_src python
# this should print the text in __init__.py
import my_package.hello as hello 
#+end_src

** working with the PYTHONPATH
in the =my_code= directory run
#+begin_src bash
python call.py # will throw and ImportError
cd my_package
set PYTHONPATH=%__CD__% # Windows
export PYTHONPATH=$PWD # Unix
cd ..
python call.py # works
#+end_src

** inspecting sys.path
Dynamic changes of =sys.path= are frowned upon
#+begin_src python
import sys
import os
sys.path
# append current path to searchpath
sys.path.append(os.path.abspath(".")) 
#+end_src

** the __name__ attribute
- gives the name of the module
- if a .py file is called directly the =__name__= is =__main__=
- see what happens when hello.py is called directly

* How to install a python package
- Pure Python Packages :: Source code is only python. Easy to install on every platform.
- Packages with compiled extensions :: These packages often include C or
     Fortran code that must be compiled for your platform.
  - Compiler is needed (not easy on Windows)
  - Try to get a precompiled (.whl or .exe) package for your platform. 
    [[http://www.lfd.uci.edu/%7Egohlke/pythonlibs/][This website]] hosts precompiled Windows packages.



** Package formats
- zipped (.zip, .tar.gz)
- compiled (.exe, .whl)
- Wheel (.whl) is the new standard packaging format
  - zip file containing all the files needed by a package
  - Also for compiled extensions
  - Example of [[https://www.python.org/dev/peps/pep-0427/#file-format][wheel file format]]
    - =numpy‑1.9.2+mkl‑cp34‑none‑win32.whl=
** pip 
- the standard tool for installing packages.
- automatically searches PyPI
- downloads and installs dependencies.

#+begin_src bash
pip list # list installed packages
pip install packagename # install
pip install packagename==1.4 # specific version
pip install package1 package2 # multiply packages
pip install packagename -U # upgrade the package to newest version
pip uninstall packagename # uninstall
#+end_src

** Virtual Environments
- Isolates packages into standalone environment. 
- If applications need different, incompatible versions of libraries.
- If you do not have rights to install packages on system (e.g. VSC)
- Python 2.7 -> =virtualenv=
- Python 3.3, 3.4 -> =pyvenv= included in python

** Let's try it

*** 
#+begin_src bash
pip install virtualenv # install virtualenv package
virtualenv test_ve
source test_ve/bin/activate
pip install antigravity
pip list
pip uninstall antigravity
pip list
#+end_src

*** 
#+begin_src bash
# Dowload package from PyPI as tar.gz
pip install **.tar.gz
tar -xf 
cd
python setup.py install
pip list
#+end_src
* Creating your own package
If you want to distribute your own package it is not too difficult.
- Watch [[https://www.youtube.com/watch?v=GeYis4ZuluY&list=PLybPZmQbie2C_QdUiXOESx7bD67JHmTdf][this video]]
- Use [[http://pyscaffold.readthedocs.org/en/v2.0.2/][Pyscaffold]] for project setup
- Use Github for code hosting

*  Additional Information
- [[https://packaging.python.org][Python Packaging User Guide]]
- [[https://www.youtube.com/watch?v=jOiAp3wtx18][This Talk from PyCon 2014]]
- [[https://packaging.python.org/en/latest/projects.html#conda][Conda package manager]] good for scientific packages
- Python Distributions come with a lot of packages pre-installed
  - [[https://store.continuum.io/cshop/anaconda/][Anaconda]] includes conda package manager
  - [[https://winpython.github.io/][WinPython]]
